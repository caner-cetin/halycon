// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const fbaInventoryCount = `-- name: FbaInventoryCount :one
select COUNT(sku)
from fba_inventory
group by sku
`

func (q *Queries) FbaInventoryCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, fbaInventoryCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAsinToSkuMapContents = `-- name: GetAsinToSkuMapContents :many
select sku,
  asin,
  title
from fba_inventory
`

type GetAsinToSkuMapContentsRow struct {
	Sku   sql.NullString
	Asin  sql.NullString
	Title sql.NullString
}

func (q *Queries) GetAsinToSkuMapContents(ctx context.Context) ([]GetAsinToSkuMapContentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAsinToSkuMapContents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAsinToSkuMapContentsRow
	for rows.Next() {
		var i GetAsinToSkuMapContentsRow
		if err := rows.Scan(&i.Sku, &i.Asin, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFBAProductFromAsin = `-- name: GetFBAProductFromAsin :one
select title, total_quantity, fulfillable_quantity, inbound_receiving_quantity, inbound_shipped_quantity, sku, asin
from fba_inventory
where asin = ?
`

func (q *Queries) GetFBAProductFromAsin(ctx context.Context, asin sql.NullString) (FbaInventory, error) {
	row := q.db.QueryRowContext(ctx, getFBAProductFromAsin, asin)
	var i FbaInventory
	err := row.Scan(
		&i.Title,
		&i.TotalQuantity,
		&i.FulfillableQuantity,
		&i.InboundReceivingQuantity,
		&i.InboundShippedQuantity,
		&i.Sku,
		&i.Asin,
	)
	return i, err
}
