// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/fba_inbound/models"
)

// ListPlacementOptionsReader is a Reader for the ListPlacementOptions structure.
type ListPlacementOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPlacementOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPlacementOptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListPlacementOptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPlacementOptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPlacementOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListPlacementOptionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListPlacementOptionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListPlacementOptionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListPlacementOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListPlacementOptionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions] listPlacementOptions", response, response.Code())
	}
}

// NewListPlacementOptionsOK creates a ListPlacementOptionsOK with default headers values
func NewListPlacementOptionsOK() *ListPlacementOptionsOK {
	return &ListPlacementOptionsOK{}
}

/*
ListPlacementOptionsOK describes a response with status code 200, with default header values.

ListPlacementOptions 200 response
*/
type ListPlacementOptionsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListPlacementOptionsResponse
}

// IsSuccess returns true when this list placement options o k response has a 2xx status code
func (o *ListPlacementOptionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list placement options o k response has a 3xx status code
func (o *ListPlacementOptionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list placement options o k response has a 4xx status code
func (o *ListPlacementOptionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list placement options o k response has a 5xx status code
func (o *ListPlacementOptionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list placement options o k response a status code equal to that given
func (o *ListPlacementOptionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list placement options o k response
func (o *ListPlacementOptionsOK) Code() int {
	return 200
}

func (o *ListPlacementOptionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsOK %s", 200, payload)
}

func (o *ListPlacementOptionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsOK %s", 200, payload)
}

func (o *ListPlacementOptionsOK) GetPayload() *models.ListPlacementOptionsResponse {
	return o.Payload
}

func (o *ListPlacementOptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListPlacementOptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlacementOptionsBadRequest creates a ListPlacementOptionsBadRequest with default headers values
func NewListPlacementOptionsBadRequest() *ListPlacementOptionsBadRequest {
	return &ListPlacementOptionsBadRequest{}
}

/*
ListPlacementOptionsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListPlacementOptionsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list placement options bad request response has a 2xx status code
func (o *ListPlacementOptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list placement options bad request response has a 3xx status code
func (o *ListPlacementOptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list placement options bad request response has a 4xx status code
func (o *ListPlacementOptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list placement options bad request response has a 5xx status code
func (o *ListPlacementOptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list placement options bad request response a status code equal to that given
func (o *ListPlacementOptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list placement options bad request response
func (o *ListPlacementOptionsBadRequest) Code() int {
	return 400
}

func (o *ListPlacementOptionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsBadRequest %s", 400, payload)
}

func (o *ListPlacementOptionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsBadRequest %s", 400, payload)
}

func (o *ListPlacementOptionsBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPlacementOptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlacementOptionsForbidden creates a ListPlacementOptionsForbidden with default headers values
func NewListPlacementOptionsForbidden() *ListPlacementOptionsForbidden {
	return &ListPlacementOptionsForbidden{}
}

/*
ListPlacementOptionsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListPlacementOptionsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list placement options forbidden response has a 2xx status code
func (o *ListPlacementOptionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list placement options forbidden response has a 3xx status code
func (o *ListPlacementOptionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list placement options forbidden response has a 4xx status code
func (o *ListPlacementOptionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list placement options forbidden response has a 5xx status code
func (o *ListPlacementOptionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list placement options forbidden response a status code equal to that given
func (o *ListPlacementOptionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list placement options forbidden response
func (o *ListPlacementOptionsForbidden) Code() int {
	return 403
}

func (o *ListPlacementOptionsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsForbidden %s", 403, payload)
}

func (o *ListPlacementOptionsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsForbidden %s", 403, payload)
}

func (o *ListPlacementOptionsForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPlacementOptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlacementOptionsNotFound creates a ListPlacementOptionsNotFound with default headers values
func NewListPlacementOptionsNotFound() *ListPlacementOptionsNotFound {
	return &ListPlacementOptionsNotFound{}
}

/*
ListPlacementOptionsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListPlacementOptionsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list placement options not found response has a 2xx status code
func (o *ListPlacementOptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list placement options not found response has a 3xx status code
func (o *ListPlacementOptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list placement options not found response has a 4xx status code
func (o *ListPlacementOptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list placement options not found response has a 5xx status code
func (o *ListPlacementOptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list placement options not found response a status code equal to that given
func (o *ListPlacementOptionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list placement options not found response
func (o *ListPlacementOptionsNotFound) Code() int {
	return 404
}

func (o *ListPlacementOptionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsNotFound %s", 404, payload)
}

func (o *ListPlacementOptionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsNotFound %s", 404, payload)
}

func (o *ListPlacementOptionsNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPlacementOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlacementOptionsRequestEntityTooLarge creates a ListPlacementOptionsRequestEntityTooLarge with default headers values
func NewListPlacementOptionsRequestEntityTooLarge() *ListPlacementOptionsRequestEntityTooLarge {
	return &ListPlacementOptionsRequestEntityTooLarge{}
}

/*
ListPlacementOptionsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListPlacementOptionsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list placement options request entity too large response has a 2xx status code
func (o *ListPlacementOptionsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list placement options request entity too large response has a 3xx status code
func (o *ListPlacementOptionsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list placement options request entity too large response has a 4xx status code
func (o *ListPlacementOptionsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list placement options request entity too large response has a 5xx status code
func (o *ListPlacementOptionsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list placement options request entity too large response a status code equal to that given
func (o *ListPlacementOptionsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the list placement options request entity too large response
func (o *ListPlacementOptionsRequestEntityTooLarge) Code() int {
	return 413
}

func (o *ListPlacementOptionsRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsRequestEntityTooLarge %s", 413, payload)
}

func (o *ListPlacementOptionsRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsRequestEntityTooLarge %s", 413, payload)
}

func (o *ListPlacementOptionsRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPlacementOptionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlacementOptionsUnsupportedMediaType creates a ListPlacementOptionsUnsupportedMediaType with default headers values
func NewListPlacementOptionsUnsupportedMediaType() *ListPlacementOptionsUnsupportedMediaType {
	return &ListPlacementOptionsUnsupportedMediaType{}
}

/*
ListPlacementOptionsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListPlacementOptionsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list placement options unsupported media type response has a 2xx status code
func (o *ListPlacementOptionsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list placement options unsupported media type response has a 3xx status code
func (o *ListPlacementOptionsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list placement options unsupported media type response has a 4xx status code
func (o *ListPlacementOptionsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list placement options unsupported media type response has a 5xx status code
func (o *ListPlacementOptionsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list placement options unsupported media type response a status code equal to that given
func (o *ListPlacementOptionsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the list placement options unsupported media type response
func (o *ListPlacementOptionsUnsupportedMediaType) Code() int {
	return 415
}

func (o *ListPlacementOptionsUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsUnsupportedMediaType %s", 415, payload)
}

func (o *ListPlacementOptionsUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsUnsupportedMediaType %s", 415, payload)
}

func (o *ListPlacementOptionsUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPlacementOptionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlacementOptionsTooManyRequests creates a ListPlacementOptionsTooManyRequests with default headers values
func NewListPlacementOptionsTooManyRequests() *ListPlacementOptionsTooManyRequests {
	return &ListPlacementOptionsTooManyRequests{}
}

/*
ListPlacementOptionsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListPlacementOptionsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list placement options too many requests response has a 2xx status code
func (o *ListPlacementOptionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list placement options too many requests response has a 3xx status code
func (o *ListPlacementOptionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list placement options too many requests response has a 4xx status code
func (o *ListPlacementOptionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list placement options too many requests response has a 5xx status code
func (o *ListPlacementOptionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list placement options too many requests response a status code equal to that given
func (o *ListPlacementOptionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list placement options too many requests response
func (o *ListPlacementOptionsTooManyRequests) Code() int {
	return 429
}

func (o *ListPlacementOptionsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsTooManyRequests %s", 429, payload)
}

func (o *ListPlacementOptionsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsTooManyRequests %s", 429, payload)
}

func (o *ListPlacementOptionsTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPlacementOptionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlacementOptionsInternalServerError creates a ListPlacementOptionsInternalServerError with default headers values
func NewListPlacementOptionsInternalServerError() *ListPlacementOptionsInternalServerError {
	return &ListPlacementOptionsInternalServerError{}
}

/*
ListPlacementOptionsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListPlacementOptionsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list placement options internal server error response has a 2xx status code
func (o *ListPlacementOptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list placement options internal server error response has a 3xx status code
func (o *ListPlacementOptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list placement options internal server error response has a 4xx status code
func (o *ListPlacementOptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list placement options internal server error response has a 5xx status code
func (o *ListPlacementOptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list placement options internal server error response a status code equal to that given
func (o *ListPlacementOptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list placement options internal server error response
func (o *ListPlacementOptionsInternalServerError) Code() int {
	return 500
}

func (o *ListPlacementOptionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsInternalServerError %s", 500, payload)
}

func (o *ListPlacementOptionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsInternalServerError %s", 500, payload)
}

func (o *ListPlacementOptionsInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPlacementOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlacementOptionsServiceUnavailable creates a ListPlacementOptionsServiceUnavailable with default headers values
func NewListPlacementOptionsServiceUnavailable() *ListPlacementOptionsServiceUnavailable {
	return &ListPlacementOptionsServiceUnavailable{}
}

/*
ListPlacementOptionsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListPlacementOptionsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list placement options service unavailable response has a 2xx status code
func (o *ListPlacementOptionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list placement options service unavailable response has a 3xx status code
func (o *ListPlacementOptionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list placement options service unavailable response has a 4xx status code
func (o *ListPlacementOptionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list placement options service unavailable response has a 5xx status code
func (o *ListPlacementOptionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list placement options service unavailable response a status code equal to that given
func (o *ListPlacementOptionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the list placement options service unavailable response
func (o *ListPlacementOptionsServiceUnavailable) Code() int {
	return 503
}

func (o *ListPlacementOptionsServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsServiceUnavailable %s", 503, payload)
}

func (o *ListPlacementOptionsServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions][%d] listPlacementOptionsServiceUnavailable %s", 503, payload)
}

func (o *ListPlacementOptionsServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPlacementOptionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
