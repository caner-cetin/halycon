// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/fba_inbound/models"
)

// ListInboundPlanPalletsReader is a Reader for the ListInboundPlanPallets structure.
type ListInboundPlanPalletsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListInboundPlanPalletsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListInboundPlanPalletsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListInboundPlanPalletsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListInboundPlanPalletsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListInboundPlanPalletsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListInboundPlanPalletsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListInboundPlanPalletsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListInboundPlanPalletsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListInboundPlanPalletsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListInboundPlanPalletsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets] listInboundPlanPallets", response, response.Code())
	}
}

// NewListInboundPlanPalletsOK creates a ListInboundPlanPalletsOK with default headers values
func NewListInboundPlanPalletsOK() *ListInboundPlanPalletsOK {
	return &ListInboundPlanPalletsOK{}
}

/*
ListInboundPlanPalletsOK describes a response with status code 200, with default header values.

ListInboundPlanPallets 200 response
*/
type ListInboundPlanPalletsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListInboundPlanPalletsResponse
}

// IsSuccess returns true when this list inbound plan pallets o k response has a 2xx status code
func (o *ListInboundPlanPalletsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list inbound plan pallets o k response has a 3xx status code
func (o *ListInboundPlanPalletsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan pallets o k response has a 4xx status code
func (o *ListInboundPlanPalletsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inbound plan pallets o k response has a 5xx status code
func (o *ListInboundPlanPalletsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan pallets o k response a status code equal to that given
func (o *ListInboundPlanPalletsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list inbound plan pallets o k response
func (o *ListInboundPlanPalletsOK) Code() int {
	return 200
}

func (o *ListInboundPlanPalletsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsOK %s", 200, payload)
}

func (o *ListInboundPlanPalletsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsOK %s", 200, payload)
}

func (o *ListInboundPlanPalletsOK) GetPayload() *models.ListInboundPlanPalletsResponse {
	return o.Payload
}

func (o *ListInboundPlanPalletsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListInboundPlanPalletsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanPalletsBadRequest creates a ListInboundPlanPalletsBadRequest with default headers values
func NewListInboundPlanPalletsBadRequest() *ListInboundPlanPalletsBadRequest {
	return &ListInboundPlanPalletsBadRequest{}
}

/*
ListInboundPlanPalletsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListInboundPlanPalletsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list inbound plan pallets bad request response has a 2xx status code
func (o *ListInboundPlanPalletsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan pallets bad request response has a 3xx status code
func (o *ListInboundPlanPalletsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan pallets bad request response has a 4xx status code
func (o *ListInboundPlanPalletsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan pallets bad request response has a 5xx status code
func (o *ListInboundPlanPalletsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan pallets bad request response a status code equal to that given
func (o *ListInboundPlanPalletsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list inbound plan pallets bad request response
func (o *ListInboundPlanPalletsBadRequest) Code() int {
	return 400
}

func (o *ListInboundPlanPalletsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsBadRequest %s", 400, payload)
}

func (o *ListInboundPlanPalletsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsBadRequest %s", 400, payload)
}

func (o *ListInboundPlanPalletsBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanPalletsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanPalletsForbidden creates a ListInboundPlanPalletsForbidden with default headers values
func NewListInboundPlanPalletsForbidden() *ListInboundPlanPalletsForbidden {
	return &ListInboundPlanPalletsForbidden{}
}

/*
ListInboundPlanPalletsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListInboundPlanPalletsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list inbound plan pallets forbidden response has a 2xx status code
func (o *ListInboundPlanPalletsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan pallets forbidden response has a 3xx status code
func (o *ListInboundPlanPalletsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan pallets forbidden response has a 4xx status code
func (o *ListInboundPlanPalletsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan pallets forbidden response has a 5xx status code
func (o *ListInboundPlanPalletsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan pallets forbidden response a status code equal to that given
func (o *ListInboundPlanPalletsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list inbound plan pallets forbidden response
func (o *ListInboundPlanPalletsForbidden) Code() int {
	return 403
}

func (o *ListInboundPlanPalletsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsForbidden %s", 403, payload)
}

func (o *ListInboundPlanPalletsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsForbidden %s", 403, payload)
}

func (o *ListInboundPlanPalletsForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanPalletsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanPalletsNotFound creates a ListInboundPlanPalletsNotFound with default headers values
func NewListInboundPlanPalletsNotFound() *ListInboundPlanPalletsNotFound {
	return &ListInboundPlanPalletsNotFound{}
}

/*
ListInboundPlanPalletsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListInboundPlanPalletsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list inbound plan pallets not found response has a 2xx status code
func (o *ListInboundPlanPalletsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan pallets not found response has a 3xx status code
func (o *ListInboundPlanPalletsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan pallets not found response has a 4xx status code
func (o *ListInboundPlanPalletsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan pallets not found response has a 5xx status code
func (o *ListInboundPlanPalletsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan pallets not found response a status code equal to that given
func (o *ListInboundPlanPalletsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list inbound plan pallets not found response
func (o *ListInboundPlanPalletsNotFound) Code() int {
	return 404
}

func (o *ListInboundPlanPalletsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsNotFound %s", 404, payload)
}

func (o *ListInboundPlanPalletsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsNotFound %s", 404, payload)
}

func (o *ListInboundPlanPalletsNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanPalletsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanPalletsRequestEntityTooLarge creates a ListInboundPlanPalletsRequestEntityTooLarge with default headers values
func NewListInboundPlanPalletsRequestEntityTooLarge() *ListInboundPlanPalletsRequestEntityTooLarge {
	return &ListInboundPlanPalletsRequestEntityTooLarge{}
}

/*
ListInboundPlanPalletsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListInboundPlanPalletsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list inbound plan pallets request entity too large response has a 2xx status code
func (o *ListInboundPlanPalletsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan pallets request entity too large response has a 3xx status code
func (o *ListInboundPlanPalletsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan pallets request entity too large response has a 4xx status code
func (o *ListInboundPlanPalletsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan pallets request entity too large response has a 5xx status code
func (o *ListInboundPlanPalletsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan pallets request entity too large response a status code equal to that given
func (o *ListInboundPlanPalletsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the list inbound plan pallets request entity too large response
func (o *ListInboundPlanPalletsRequestEntityTooLarge) Code() int {
	return 413
}

func (o *ListInboundPlanPalletsRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsRequestEntityTooLarge %s", 413, payload)
}

func (o *ListInboundPlanPalletsRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsRequestEntityTooLarge %s", 413, payload)
}

func (o *ListInboundPlanPalletsRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanPalletsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanPalletsUnsupportedMediaType creates a ListInboundPlanPalletsUnsupportedMediaType with default headers values
func NewListInboundPlanPalletsUnsupportedMediaType() *ListInboundPlanPalletsUnsupportedMediaType {
	return &ListInboundPlanPalletsUnsupportedMediaType{}
}

/*
ListInboundPlanPalletsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListInboundPlanPalletsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list inbound plan pallets unsupported media type response has a 2xx status code
func (o *ListInboundPlanPalletsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan pallets unsupported media type response has a 3xx status code
func (o *ListInboundPlanPalletsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan pallets unsupported media type response has a 4xx status code
func (o *ListInboundPlanPalletsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan pallets unsupported media type response has a 5xx status code
func (o *ListInboundPlanPalletsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan pallets unsupported media type response a status code equal to that given
func (o *ListInboundPlanPalletsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the list inbound plan pallets unsupported media type response
func (o *ListInboundPlanPalletsUnsupportedMediaType) Code() int {
	return 415
}

func (o *ListInboundPlanPalletsUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsUnsupportedMediaType %s", 415, payload)
}

func (o *ListInboundPlanPalletsUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsUnsupportedMediaType %s", 415, payload)
}

func (o *ListInboundPlanPalletsUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanPalletsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanPalletsTooManyRequests creates a ListInboundPlanPalletsTooManyRequests with default headers values
func NewListInboundPlanPalletsTooManyRequests() *ListInboundPlanPalletsTooManyRequests {
	return &ListInboundPlanPalletsTooManyRequests{}
}

/*
ListInboundPlanPalletsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListInboundPlanPalletsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list inbound plan pallets too many requests response has a 2xx status code
func (o *ListInboundPlanPalletsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan pallets too many requests response has a 3xx status code
func (o *ListInboundPlanPalletsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan pallets too many requests response has a 4xx status code
func (o *ListInboundPlanPalletsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan pallets too many requests response has a 5xx status code
func (o *ListInboundPlanPalletsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan pallets too many requests response a status code equal to that given
func (o *ListInboundPlanPalletsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list inbound plan pallets too many requests response
func (o *ListInboundPlanPalletsTooManyRequests) Code() int {
	return 429
}

func (o *ListInboundPlanPalletsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsTooManyRequests %s", 429, payload)
}

func (o *ListInboundPlanPalletsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsTooManyRequests %s", 429, payload)
}

func (o *ListInboundPlanPalletsTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanPalletsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanPalletsInternalServerError creates a ListInboundPlanPalletsInternalServerError with default headers values
func NewListInboundPlanPalletsInternalServerError() *ListInboundPlanPalletsInternalServerError {
	return &ListInboundPlanPalletsInternalServerError{}
}

/*
ListInboundPlanPalletsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListInboundPlanPalletsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list inbound plan pallets internal server error response has a 2xx status code
func (o *ListInboundPlanPalletsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan pallets internal server error response has a 3xx status code
func (o *ListInboundPlanPalletsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan pallets internal server error response has a 4xx status code
func (o *ListInboundPlanPalletsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inbound plan pallets internal server error response has a 5xx status code
func (o *ListInboundPlanPalletsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list inbound plan pallets internal server error response a status code equal to that given
func (o *ListInboundPlanPalletsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list inbound plan pallets internal server error response
func (o *ListInboundPlanPalletsInternalServerError) Code() int {
	return 500
}

func (o *ListInboundPlanPalletsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsInternalServerError %s", 500, payload)
}

func (o *ListInboundPlanPalletsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsInternalServerError %s", 500, payload)
}

func (o *ListInboundPlanPalletsInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanPalletsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanPalletsServiceUnavailable creates a ListInboundPlanPalletsServiceUnavailable with default headers values
func NewListInboundPlanPalletsServiceUnavailable() *ListInboundPlanPalletsServiceUnavailable {
	return &ListInboundPlanPalletsServiceUnavailable{}
}

/*
ListInboundPlanPalletsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListInboundPlanPalletsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list inbound plan pallets service unavailable response has a 2xx status code
func (o *ListInboundPlanPalletsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan pallets service unavailable response has a 3xx status code
func (o *ListInboundPlanPalletsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan pallets service unavailable response has a 4xx status code
func (o *ListInboundPlanPalletsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inbound plan pallets service unavailable response has a 5xx status code
func (o *ListInboundPlanPalletsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list inbound plan pallets service unavailable response a status code equal to that given
func (o *ListInboundPlanPalletsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the list inbound plan pallets service unavailable response
func (o *ListInboundPlanPalletsServiceUnavailable) Code() int {
	return 503
}

func (o *ListInboundPlanPalletsServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsServiceUnavailable %s", 503, payload)
}

func (o *ListInboundPlanPalletsServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets][%d] listInboundPlanPalletsServiceUnavailable %s", 503, payload)
}

func (o *ListInboundPlanPalletsServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanPalletsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
