// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/fba_inbound/models"
)

// ListDeliveryWindowOptionsReader is a Reader for the ListDeliveryWindowOptions structure.
type ListDeliveryWindowOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDeliveryWindowOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDeliveryWindowOptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListDeliveryWindowOptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListDeliveryWindowOptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListDeliveryWindowOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListDeliveryWindowOptionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListDeliveryWindowOptionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListDeliveryWindowOptionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListDeliveryWindowOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListDeliveryWindowOptionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions] listDeliveryWindowOptions", response, response.Code())
	}
}

// NewListDeliveryWindowOptionsOK creates a ListDeliveryWindowOptionsOK with default headers values
func NewListDeliveryWindowOptionsOK() *ListDeliveryWindowOptionsOK {
	return &ListDeliveryWindowOptionsOK{}
}

/*
ListDeliveryWindowOptionsOK describes a response with status code 200, with default header values.

ListDeliveryWindowOptions 200 response
*/
type ListDeliveryWindowOptionsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListDeliveryWindowOptionsResponse
}

// IsSuccess returns true when this list delivery window options o k response has a 2xx status code
func (o *ListDeliveryWindowOptionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list delivery window options o k response has a 3xx status code
func (o *ListDeliveryWindowOptionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delivery window options o k response has a 4xx status code
func (o *ListDeliveryWindowOptionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list delivery window options o k response has a 5xx status code
func (o *ListDeliveryWindowOptionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list delivery window options o k response a status code equal to that given
func (o *ListDeliveryWindowOptionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list delivery window options o k response
func (o *ListDeliveryWindowOptionsOK) Code() int {
	return 200
}

func (o *ListDeliveryWindowOptionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsOK %s", 200, payload)
}

func (o *ListDeliveryWindowOptionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsOK %s", 200, payload)
}

func (o *ListDeliveryWindowOptionsOK) GetPayload() *models.ListDeliveryWindowOptionsResponse {
	return o.Payload
}

func (o *ListDeliveryWindowOptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListDeliveryWindowOptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeliveryWindowOptionsBadRequest creates a ListDeliveryWindowOptionsBadRequest with default headers values
func NewListDeliveryWindowOptionsBadRequest() *ListDeliveryWindowOptionsBadRequest {
	return &ListDeliveryWindowOptionsBadRequest{}
}

/*
ListDeliveryWindowOptionsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListDeliveryWindowOptionsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list delivery window options bad request response has a 2xx status code
func (o *ListDeliveryWindowOptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delivery window options bad request response has a 3xx status code
func (o *ListDeliveryWindowOptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delivery window options bad request response has a 4xx status code
func (o *ListDeliveryWindowOptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delivery window options bad request response has a 5xx status code
func (o *ListDeliveryWindowOptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list delivery window options bad request response a status code equal to that given
func (o *ListDeliveryWindowOptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list delivery window options bad request response
func (o *ListDeliveryWindowOptionsBadRequest) Code() int {
	return 400
}

func (o *ListDeliveryWindowOptionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsBadRequest %s", 400, payload)
}

func (o *ListDeliveryWindowOptionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsBadRequest %s", 400, payload)
}

func (o *ListDeliveryWindowOptionsBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListDeliveryWindowOptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeliveryWindowOptionsForbidden creates a ListDeliveryWindowOptionsForbidden with default headers values
func NewListDeliveryWindowOptionsForbidden() *ListDeliveryWindowOptionsForbidden {
	return &ListDeliveryWindowOptionsForbidden{}
}

/*
ListDeliveryWindowOptionsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListDeliveryWindowOptionsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list delivery window options forbidden response has a 2xx status code
func (o *ListDeliveryWindowOptionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delivery window options forbidden response has a 3xx status code
func (o *ListDeliveryWindowOptionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delivery window options forbidden response has a 4xx status code
func (o *ListDeliveryWindowOptionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delivery window options forbidden response has a 5xx status code
func (o *ListDeliveryWindowOptionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list delivery window options forbidden response a status code equal to that given
func (o *ListDeliveryWindowOptionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list delivery window options forbidden response
func (o *ListDeliveryWindowOptionsForbidden) Code() int {
	return 403
}

func (o *ListDeliveryWindowOptionsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsForbidden %s", 403, payload)
}

func (o *ListDeliveryWindowOptionsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsForbidden %s", 403, payload)
}

func (o *ListDeliveryWindowOptionsForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListDeliveryWindowOptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeliveryWindowOptionsNotFound creates a ListDeliveryWindowOptionsNotFound with default headers values
func NewListDeliveryWindowOptionsNotFound() *ListDeliveryWindowOptionsNotFound {
	return &ListDeliveryWindowOptionsNotFound{}
}

/*
ListDeliveryWindowOptionsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListDeliveryWindowOptionsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list delivery window options not found response has a 2xx status code
func (o *ListDeliveryWindowOptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delivery window options not found response has a 3xx status code
func (o *ListDeliveryWindowOptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delivery window options not found response has a 4xx status code
func (o *ListDeliveryWindowOptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delivery window options not found response has a 5xx status code
func (o *ListDeliveryWindowOptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list delivery window options not found response a status code equal to that given
func (o *ListDeliveryWindowOptionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list delivery window options not found response
func (o *ListDeliveryWindowOptionsNotFound) Code() int {
	return 404
}

func (o *ListDeliveryWindowOptionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsNotFound %s", 404, payload)
}

func (o *ListDeliveryWindowOptionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsNotFound %s", 404, payload)
}

func (o *ListDeliveryWindowOptionsNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListDeliveryWindowOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeliveryWindowOptionsRequestEntityTooLarge creates a ListDeliveryWindowOptionsRequestEntityTooLarge with default headers values
func NewListDeliveryWindowOptionsRequestEntityTooLarge() *ListDeliveryWindowOptionsRequestEntityTooLarge {
	return &ListDeliveryWindowOptionsRequestEntityTooLarge{}
}

/*
ListDeliveryWindowOptionsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListDeliveryWindowOptionsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list delivery window options request entity too large response has a 2xx status code
func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delivery window options request entity too large response has a 3xx status code
func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delivery window options request entity too large response has a 4xx status code
func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delivery window options request entity too large response has a 5xx status code
func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list delivery window options request entity too large response a status code equal to that given
func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the list delivery window options request entity too large response
func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) Code() int {
	return 413
}

func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsRequestEntityTooLarge %s", 413, payload)
}

func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsRequestEntityTooLarge %s", 413, payload)
}

func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListDeliveryWindowOptionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeliveryWindowOptionsUnsupportedMediaType creates a ListDeliveryWindowOptionsUnsupportedMediaType with default headers values
func NewListDeliveryWindowOptionsUnsupportedMediaType() *ListDeliveryWindowOptionsUnsupportedMediaType {
	return &ListDeliveryWindowOptionsUnsupportedMediaType{}
}

/*
ListDeliveryWindowOptionsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListDeliveryWindowOptionsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list delivery window options unsupported media type response has a 2xx status code
func (o *ListDeliveryWindowOptionsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delivery window options unsupported media type response has a 3xx status code
func (o *ListDeliveryWindowOptionsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delivery window options unsupported media type response has a 4xx status code
func (o *ListDeliveryWindowOptionsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delivery window options unsupported media type response has a 5xx status code
func (o *ListDeliveryWindowOptionsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list delivery window options unsupported media type response a status code equal to that given
func (o *ListDeliveryWindowOptionsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the list delivery window options unsupported media type response
func (o *ListDeliveryWindowOptionsUnsupportedMediaType) Code() int {
	return 415
}

func (o *ListDeliveryWindowOptionsUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsUnsupportedMediaType %s", 415, payload)
}

func (o *ListDeliveryWindowOptionsUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsUnsupportedMediaType %s", 415, payload)
}

func (o *ListDeliveryWindowOptionsUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListDeliveryWindowOptionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeliveryWindowOptionsTooManyRequests creates a ListDeliveryWindowOptionsTooManyRequests with default headers values
func NewListDeliveryWindowOptionsTooManyRequests() *ListDeliveryWindowOptionsTooManyRequests {
	return &ListDeliveryWindowOptionsTooManyRequests{}
}

/*
ListDeliveryWindowOptionsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListDeliveryWindowOptionsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list delivery window options too many requests response has a 2xx status code
func (o *ListDeliveryWindowOptionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delivery window options too many requests response has a 3xx status code
func (o *ListDeliveryWindowOptionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delivery window options too many requests response has a 4xx status code
func (o *ListDeliveryWindowOptionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delivery window options too many requests response has a 5xx status code
func (o *ListDeliveryWindowOptionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list delivery window options too many requests response a status code equal to that given
func (o *ListDeliveryWindowOptionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list delivery window options too many requests response
func (o *ListDeliveryWindowOptionsTooManyRequests) Code() int {
	return 429
}

func (o *ListDeliveryWindowOptionsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsTooManyRequests %s", 429, payload)
}

func (o *ListDeliveryWindowOptionsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsTooManyRequests %s", 429, payload)
}

func (o *ListDeliveryWindowOptionsTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListDeliveryWindowOptionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeliveryWindowOptionsInternalServerError creates a ListDeliveryWindowOptionsInternalServerError with default headers values
func NewListDeliveryWindowOptionsInternalServerError() *ListDeliveryWindowOptionsInternalServerError {
	return &ListDeliveryWindowOptionsInternalServerError{}
}

/*
ListDeliveryWindowOptionsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListDeliveryWindowOptionsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list delivery window options internal server error response has a 2xx status code
func (o *ListDeliveryWindowOptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delivery window options internal server error response has a 3xx status code
func (o *ListDeliveryWindowOptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delivery window options internal server error response has a 4xx status code
func (o *ListDeliveryWindowOptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list delivery window options internal server error response has a 5xx status code
func (o *ListDeliveryWindowOptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list delivery window options internal server error response a status code equal to that given
func (o *ListDeliveryWindowOptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list delivery window options internal server error response
func (o *ListDeliveryWindowOptionsInternalServerError) Code() int {
	return 500
}

func (o *ListDeliveryWindowOptionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsInternalServerError %s", 500, payload)
}

func (o *ListDeliveryWindowOptionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsInternalServerError %s", 500, payload)
}

func (o *ListDeliveryWindowOptionsInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListDeliveryWindowOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeliveryWindowOptionsServiceUnavailable creates a ListDeliveryWindowOptionsServiceUnavailable with default headers values
func NewListDeliveryWindowOptionsServiceUnavailable() *ListDeliveryWindowOptionsServiceUnavailable {
	return &ListDeliveryWindowOptionsServiceUnavailable{}
}

/*
ListDeliveryWindowOptionsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListDeliveryWindowOptionsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list delivery window options service unavailable response has a 2xx status code
func (o *ListDeliveryWindowOptionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delivery window options service unavailable response has a 3xx status code
func (o *ListDeliveryWindowOptionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delivery window options service unavailable response has a 4xx status code
func (o *ListDeliveryWindowOptionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list delivery window options service unavailable response has a 5xx status code
func (o *ListDeliveryWindowOptionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list delivery window options service unavailable response a status code equal to that given
func (o *ListDeliveryWindowOptionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the list delivery window options service unavailable response
func (o *ListDeliveryWindowOptionsServiceUnavailable) Code() int {
	return 503
}

func (o *ListDeliveryWindowOptionsServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsServiceUnavailable %s", 503, payload)
}

func (o *ListDeliveryWindowOptionsServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] listDeliveryWindowOptionsServiceUnavailable %s", 503, payload)
}

func (o *ListDeliveryWindowOptionsServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListDeliveryWindowOptionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
