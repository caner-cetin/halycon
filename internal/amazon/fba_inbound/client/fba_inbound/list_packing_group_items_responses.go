// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/fba_inbound/models"
)

// ListPackingGroupItemsReader is a Reader for the ListPackingGroupItems structure.
type ListPackingGroupItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPackingGroupItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPackingGroupItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListPackingGroupItemsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPackingGroupItemsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPackingGroupItemsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListPackingGroupItemsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListPackingGroupItemsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListPackingGroupItemsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListPackingGroupItemsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListPackingGroupItemsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items] listPackingGroupItems", response, response.Code())
	}
}

// NewListPackingGroupItemsOK creates a ListPackingGroupItemsOK with default headers values
func NewListPackingGroupItemsOK() *ListPackingGroupItemsOK {
	return &ListPackingGroupItemsOK{}
}

/*
ListPackingGroupItemsOK describes a response with status code 200, with default header values.

ListPackingGroupItems 200 response
*/
type ListPackingGroupItemsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListPackingGroupItemsResponse
}

// IsSuccess returns true when this list packing group items o k response has a 2xx status code
func (o *ListPackingGroupItemsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list packing group items o k response has a 3xx status code
func (o *ListPackingGroupItemsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group items o k response has a 4xx status code
func (o *ListPackingGroupItemsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list packing group items o k response has a 5xx status code
func (o *ListPackingGroupItemsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group items o k response a status code equal to that given
func (o *ListPackingGroupItemsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list packing group items o k response
func (o *ListPackingGroupItemsOK) Code() int {
	return 200
}

func (o *ListPackingGroupItemsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsOK %s", 200, payload)
}

func (o *ListPackingGroupItemsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsOK %s", 200, payload)
}

func (o *ListPackingGroupItemsOK) GetPayload() *models.ListPackingGroupItemsResponse {
	return o.Payload
}

func (o *ListPackingGroupItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListPackingGroupItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupItemsBadRequest creates a ListPackingGroupItemsBadRequest with default headers values
func NewListPackingGroupItemsBadRequest() *ListPackingGroupItemsBadRequest {
	return &ListPackingGroupItemsBadRequest{}
}

/*
ListPackingGroupItemsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListPackingGroupItemsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group items bad request response has a 2xx status code
func (o *ListPackingGroupItemsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group items bad request response has a 3xx status code
func (o *ListPackingGroupItemsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group items bad request response has a 4xx status code
func (o *ListPackingGroupItemsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group items bad request response has a 5xx status code
func (o *ListPackingGroupItemsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group items bad request response a status code equal to that given
func (o *ListPackingGroupItemsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list packing group items bad request response
func (o *ListPackingGroupItemsBadRequest) Code() int {
	return 400
}

func (o *ListPackingGroupItemsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsBadRequest %s", 400, payload)
}

func (o *ListPackingGroupItemsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsBadRequest %s", 400, payload)
}

func (o *ListPackingGroupItemsBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupItemsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupItemsForbidden creates a ListPackingGroupItemsForbidden with default headers values
func NewListPackingGroupItemsForbidden() *ListPackingGroupItemsForbidden {
	return &ListPackingGroupItemsForbidden{}
}

/*
ListPackingGroupItemsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListPackingGroupItemsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group items forbidden response has a 2xx status code
func (o *ListPackingGroupItemsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group items forbidden response has a 3xx status code
func (o *ListPackingGroupItemsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group items forbidden response has a 4xx status code
func (o *ListPackingGroupItemsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group items forbidden response has a 5xx status code
func (o *ListPackingGroupItemsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group items forbidden response a status code equal to that given
func (o *ListPackingGroupItemsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list packing group items forbidden response
func (o *ListPackingGroupItemsForbidden) Code() int {
	return 403
}

func (o *ListPackingGroupItemsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsForbidden %s", 403, payload)
}

func (o *ListPackingGroupItemsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsForbidden %s", 403, payload)
}

func (o *ListPackingGroupItemsForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupItemsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupItemsNotFound creates a ListPackingGroupItemsNotFound with default headers values
func NewListPackingGroupItemsNotFound() *ListPackingGroupItemsNotFound {
	return &ListPackingGroupItemsNotFound{}
}

/*
ListPackingGroupItemsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListPackingGroupItemsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group items not found response has a 2xx status code
func (o *ListPackingGroupItemsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group items not found response has a 3xx status code
func (o *ListPackingGroupItemsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group items not found response has a 4xx status code
func (o *ListPackingGroupItemsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group items not found response has a 5xx status code
func (o *ListPackingGroupItemsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group items not found response a status code equal to that given
func (o *ListPackingGroupItemsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list packing group items not found response
func (o *ListPackingGroupItemsNotFound) Code() int {
	return 404
}

func (o *ListPackingGroupItemsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsNotFound %s", 404, payload)
}

func (o *ListPackingGroupItemsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsNotFound %s", 404, payload)
}

func (o *ListPackingGroupItemsNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupItemsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupItemsRequestEntityTooLarge creates a ListPackingGroupItemsRequestEntityTooLarge with default headers values
func NewListPackingGroupItemsRequestEntityTooLarge() *ListPackingGroupItemsRequestEntityTooLarge {
	return &ListPackingGroupItemsRequestEntityTooLarge{}
}

/*
ListPackingGroupItemsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListPackingGroupItemsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group items request entity too large response has a 2xx status code
func (o *ListPackingGroupItemsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group items request entity too large response has a 3xx status code
func (o *ListPackingGroupItemsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group items request entity too large response has a 4xx status code
func (o *ListPackingGroupItemsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group items request entity too large response has a 5xx status code
func (o *ListPackingGroupItemsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group items request entity too large response a status code equal to that given
func (o *ListPackingGroupItemsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the list packing group items request entity too large response
func (o *ListPackingGroupItemsRequestEntityTooLarge) Code() int {
	return 413
}

func (o *ListPackingGroupItemsRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsRequestEntityTooLarge %s", 413, payload)
}

func (o *ListPackingGroupItemsRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsRequestEntityTooLarge %s", 413, payload)
}

func (o *ListPackingGroupItemsRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupItemsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupItemsUnsupportedMediaType creates a ListPackingGroupItemsUnsupportedMediaType with default headers values
func NewListPackingGroupItemsUnsupportedMediaType() *ListPackingGroupItemsUnsupportedMediaType {
	return &ListPackingGroupItemsUnsupportedMediaType{}
}

/*
ListPackingGroupItemsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListPackingGroupItemsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group items unsupported media type response has a 2xx status code
func (o *ListPackingGroupItemsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group items unsupported media type response has a 3xx status code
func (o *ListPackingGroupItemsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group items unsupported media type response has a 4xx status code
func (o *ListPackingGroupItemsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group items unsupported media type response has a 5xx status code
func (o *ListPackingGroupItemsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group items unsupported media type response a status code equal to that given
func (o *ListPackingGroupItemsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the list packing group items unsupported media type response
func (o *ListPackingGroupItemsUnsupportedMediaType) Code() int {
	return 415
}

func (o *ListPackingGroupItemsUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsUnsupportedMediaType %s", 415, payload)
}

func (o *ListPackingGroupItemsUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsUnsupportedMediaType %s", 415, payload)
}

func (o *ListPackingGroupItemsUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupItemsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupItemsTooManyRequests creates a ListPackingGroupItemsTooManyRequests with default headers values
func NewListPackingGroupItemsTooManyRequests() *ListPackingGroupItemsTooManyRequests {
	return &ListPackingGroupItemsTooManyRequests{}
}

/*
ListPackingGroupItemsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListPackingGroupItemsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group items too many requests response has a 2xx status code
func (o *ListPackingGroupItemsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group items too many requests response has a 3xx status code
func (o *ListPackingGroupItemsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group items too many requests response has a 4xx status code
func (o *ListPackingGroupItemsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group items too many requests response has a 5xx status code
func (o *ListPackingGroupItemsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group items too many requests response a status code equal to that given
func (o *ListPackingGroupItemsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list packing group items too many requests response
func (o *ListPackingGroupItemsTooManyRequests) Code() int {
	return 429
}

func (o *ListPackingGroupItemsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsTooManyRequests %s", 429, payload)
}

func (o *ListPackingGroupItemsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsTooManyRequests %s", 429, payload)
}

func (o *ListPackingGroupItemsTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupItemsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupItemsInternalServerError creates a ListPackingGroupItemsInternalServerError with default headers values
func NewListPackingGroupItemsInternalServerError() *ListPackingGroupItemsInternalServerError {
	return &ListPackingGroupItemsInternalServerError{}
}

/*
ListPackingGroupItemsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListPackingGroupItemsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group items internal server error response has a 2xx status code
func (o *ListPackingGroupItemsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group items internal server error response has a 3xx status code
func (o *ListPackingGroupItemsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group items internal server error response has a 4xx status code
func (o *ListPackingGroupItemsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list packing group items internal server error response has a 5xx status code
func (o *ListPackingGroupItemsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list packing group items internal server error response a status code equal to that given
func (o *ListPackingGroupItemsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list packing group items internal server error response
func (o *ListPackingGroupItemsInternalServerError) Code() int {
	return 500
}

func (o *ListPackingGroupItemsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsInternalServerError %s", 500, payload)
}

func (o *ListPackingGroupItemsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsInternalServerError %s", 500, payload)
}

func (o *ListPackingGroupItemsInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupItemsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupItemsServiceUnavailable creates a ListPackingGroupItemsServiceUnavailable with default headers values
func NewListPackingGroupItemsServiceUnavailable() *ListPackingGroupItemsServiceUnavailable {
	return &ListPackingGroupItemsServiceUnavailable{}
}

/*
ListPackingGroupItemsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListPackingGroupItemsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group items service unavailable response has a 2xx status code
func (o *ListPackingGroupItemsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group items service unavailable response has a 3xx status code
func (o *ListPackingGroupItemsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group items service unavailable response has a 4xx status code
func (o *ListPackingGroupItemsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list packing group items service unavailable response has a 5xx status code
func (o *ListPackingGroupItemsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list packing group items service unavailable response a status code equal to that given
func (o *ListPackingGroupItemsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the list packing group items service unavailable response
func (o *ListPackingGroupItemsServiceUnavailable) Code() int {
	return 503
}

func (o *ListPackingGroupItemsServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsServiceUnavailable %s", 503, payload)
}

func (o *ListPackingGroupItemsServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items][%d] listPackingGroupItemsServiceUnavailable %s", 503, payload)
}

func (o *ListPackingGroupItemsServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupItemsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
