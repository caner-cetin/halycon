// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/fba_inbound/models"
)

// ListPackingGroupBoxesReader is a Reader for the ListPackingGroupBoxes structure.
type ListPackingGroupBoxesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPackingGroupBoxesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPackingGroupBoxesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListPackingGroupBoxesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPackingGroupBoxesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPackingGroupBoxesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListPackingGroupBoxesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListPackingGroupBoxesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListPackingGroupBoxesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListPackingGroupBoxesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListPackingGroupBoxesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes] listPackingGroupBoxes", response, response.Code())
	}
}

// NewListPackingGroupBoxesOK creates a ListPackingGroupBoxesOK with default headers values
func NewListPackingGroupBoxesOK() *ListPackingGroupBoxesOK {
	return &ListPackingGroupBoxesOK{}
}

/*
ListPackingGroupBoxesOK describes a response with status code 200, with default header values.

ListPackingGroupBoxes 200 response
*/
type ListPackingGroupBoxesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListPackingGroupBoxesResponse
}

// IsSuccess returns true when this list packing group boxes o k response has a 2xx status code
func (o *ListPackingGroupBoxesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list packing group boxes o k response has a 3xx status code
func (o *ListPackingGroupBoxesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group boxes o k response has a 4xx status code
func (o *ListPackingGroupBoxesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list packing group boxes o k response has a 5xx status code
func (o *ListPackingGroupBoxesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group boxes o k response a status code equal to that given
func (o *ListPackingGroupBoxesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list packing group boxes o k response
func (o *ListPackingGroupBoxesOK) Code() int {
	return 200
}

func (o *ListPackingGroupBoxesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesOK %s", 200, payload)
}

func (o *ListPackingGroupBoxesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesOK %s", 200, payload)
}

func (o *ListPackingGroupBoxesOK) GetPayload() *models.ListPackingGroupBoxesResponse {
	return o.Payload
}

func (o *ListPackingGroupBoxesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListPackingGroupBoxesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupBoxesBadRequest creates a ListPackingGroupBoxesBadRequest with default headers values
func NewListPackingGroupBoxesBadRequest() *ListPackingGroupBoxesBadRequest {
	return &ListPackingGroupBoxesBadRequest{}
}

/*
ListPackingGroupBoxesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListPackingGroupBoxesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group boxes bad request response has a 2xx status code
func (o *ListPackingGroupBoxesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group boxes bad request response has a 3xx status code
func (o *ListPackingGroupBoxesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group boxes bad request response has a 4xx status code
func (o *ListPackingGroupBoxesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group boxes bad request response has a 5xx status code
func (o *ListPackingGroupBoxesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group boxes bad request response a status code equal to that given
func (o *ListPackingGroupBoxesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list packing group boxes bad request response
func (o *ListPackingGroupBoxesBadRequest) Code() int {
	return 400
}

func (o *ListPackingGroupBoxesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesBadRequest %s", 400, payload)
}

func (o *ListPackingGroupBoxesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesBadRequest %s", 400, payload)
}

func (o *ListPackingGroupBoxesBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupBoxesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupBoxesForbidden creates a ListPackingGroupBoxesForbidden with default headers values
func NewListPackingGroupBoxesForbidden() *ListPackingGroupBoxesForbidden {
	return &ListPackingGroupBoxesForbidden{}
}

/*
ListPackingGroupBoxesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListPackingGroupBoxesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group boxes forbidden response has a 2xx status code
func (o *ListPackingGroupBoxesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group boxes forbidden response has a 3xx status code
func (o *ListPackingGroupBoxesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group boxes forbidden response has a 4xx status code
func (o *ListPackingGroupBoxesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group boxes forbidden response has a 5xx status code
func (o *ListPackingGroupBoxesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group boxes forbidden response a status code equal to that given
func (o *ListPackingGroupBoxesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list packing group boxes forbidden response
func (o *ListPackingGroupBoxesForbidden) Code() int {
	return 403
}

func (o *ListPackingGroupBoxesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesForbidden %s", 403, payload)
}

func (o *ListPackingGroupBoxesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesForbidden %s", 403, payload)
}

func (o *ListPackingGroupBoxesForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupBoxesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupBoxesNotFound creates a ListPackingGroupBoxesNotFound with default headers values
func NewListPackingGroupBoxesNotFound() *ListPackingGroupBoxesNotFound {
	return &ListPackingGroupBoxesNotFound{}
}

/*
ListPackingGroupBoxesNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListPackingGroupBoxesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group boxes not found response has a 2xx status code
func (o *ListPackingGroupBoxesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group boxes not found response has a 3xx status code
func (o *ListPackingGroupBoxesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group boxes not found response has a 4xx status code
func (o *ListPackingGroupBoxesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group boxes not found response has a 5xx status code
func (o *ListPackingGroupBoxesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group boxes not found response a status code equal to that given
func (o *ListPackingGroupBoxesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list packing group boxes not found response
func (o *ListPackingGroupBoxesNotFound) Code() int {
	return 404
}

func (o *ListPackingGroupBoxesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesNotFound %s", 404, payload)
}

func (o *ListPackingGroupBoxesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesNotFound %s", 404, payload)
}

func (o *ListPackingGroupBoxesNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupBoxesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupBoxesRequestEntityTooLarge creates a ListPackingGroupBoxesRequestEntityTooLarge with default headers values
func NewListPackingGroupBoxesRequestEntityTooLarge() *ListPackingGroupBoxesRequestEntityTooLarge {
	return &ListPackingGroupBoxesRequestEntityTooLarge{}
}

/*
ListPackingGroupBoxesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListPackingGroupBoxesRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group boxes request entity too large response has a 2xx status code
func (o *ListPackingGroupBoxesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group boxes request entity too large response has a 3xx status code
func (o *ListPackingGroupBoxesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group boxes request entity too large response has a 4xx status code
func (o *ListPackingGroupBoxesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group boxes request entity too large response has a 5xx status code
func (o *ListPackingGroupBoxesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group boxes request entity too large response a status code equal to that given
func (o *ListPackingGroupBoxesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the list packing group boxes request entity too large response
func (o *ListPackingGroupBoxesRequestEntityTooLarge) Code() int {
	return 413
}

func (o *ListPackingGroupBoxesRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesRequestEntityTooLarge %s", 413, payload)
}

func (o *ListPackingGroupBoxesRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesRequestEntityTooLarge %s", 413, payload)
}

func (o *ListPackingGroupBoxesRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupBoxesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupBoxesUnsupportedMediaType creates a ListPackingGroupBoxesUnsupportedMediaType with default headers values
func NewListPackingGroupBoxesUnsupportedMediaType() *ListPackingGroupBoxesUnsupportedMediaType {
	return &ListPackingGroupBoxesUnsupportedMediaType{}
}

/*
ListPackingGroupBoxesUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListPackingGroupBoxesUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group boxes unsupported media type response has a 2xx status code
func (o *ListPackingGroupBoxesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group boxes unsupported media type response has a 3xx status code
func (o *ListPackingGroupBoxesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group boxes unsupported media type response has a 4xx status code
func (o *ListPackingGroupBoxesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group boxes unsupported media type response has a 5xx status code
func (o *ListPackingGroupBoxesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group boxes unsupported media type response a status code equal to that given
func (o *ListPackingGroupBoxesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the list packing group boxes unsupported media type response
func (o *ListPackingGroupBoxesUnsupportedMediaType) Code() int {
	return 415
}

func (o *ListPackingGroupBoxesUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesUnsupportedMediaType %s", 415, payload)
}

func (o *ListPackingGroupBoxesUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesUnsupportedMediaType %s", 415, payload)
}

func (o *ListPackingGroupBoxesUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupBoxesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupBoxesTooManyRequests creates a ListPackingGroupBoxesTooManyRequests with default headers values
func NewListPackingGroupBoxesTooManyRequests() *ListPackingGroupBoxesTooManyRequests {
	return &ListPackingGroupBoxesTooManyRequests{}
}

/*
ListPackingGroupBoxesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListPackingGroupBoxesTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group boxes too many requests response has a 2xx status code
func (o *ListPackingGroupBoxesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group boxes too many requests response has a 3xx status code
func (o *ListPackingGroupBoxesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group boxes too many requests response has a 4xx status code
func (o *ListPackingGroupBoxesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing group boxes too many requests response has a 5xx status code
func (o *ListPackingGroupBoxesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing group boxes too many requests response a status code equal to that given
func (o *ListPackingGroupBoxesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list packing group boxes too many requests response
func (o *ListPackingGroupBoxesTooManyRequests) Code() int {
	return 429
}

func (o *ListPackingGroupBoxesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesTooManyRequests %s", 429, payload)
}

func (o *ListPackingGroupBoxesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesTooManyRequests %s", 429, payload)
}

func (o *ListPackingGroupBoxesTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupBoxesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupBoxesInternalServerError creates a ListPackingGroupBoxesInternalServerError with default headers values
func NewListPackingGroupBoxesInternalServerError() *ListPackingGroupBoxesInternalServerError {
	return &ListPackingGroupBoxesInternalServerError{}
}

/*
ListPackingGroupBoxesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListPackingGroupBoxesInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group boxes internal server error response has a 2xx status code
func (o *ListPackingGroupBoxesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group boxes internal server error response has a 3xx status code
func (o *ListPackingGroupBoxesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group boxes internal server error response has a 4xx status code
func (o *ListPackingGroupBoxesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list packing group boxes internal server error response has a 5xx status code
func (o *ListPackingGroupBoxesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list packing group boxes internal server error response a status code equal to that given
func (o *ListPackingGroupBoxesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list packing group boxes internal server error response
func (o *ListPackingGroupBoxesInternalServerError) Code() int {
	return 500
}

func (o *ListPackingGroupBoxesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesInternalServerError %s", 500, payload)
}

func (o *ListPackingGroupBoxesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesInternalServerError %s", 500, payload)
}

func (o *ListPackingGroupBoxesInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupBoxesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingGroupBoxesServiceUnavailable creates a ListPackingGroupBoxesServiceUnavailable with default headers values
func NewListPackingGroupBoxesServiceUnavailable() *ListPackingGroupBoxesServiceUnavailable {
	return &ListPackingGroupBoxesServiceUnavailable{}
}

/*
ListPackingGroupBoxesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListPackingGroupBoxesServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this list packing group boxes service unavailable response has a 2xx status code
func (o *ListPackingGroupBoxesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing group boxes service unavailable response has a 3xx status code
func (o *ListPackingGroupBoxesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing group boxes service unavailable response has a 4xx status code
func (o *ListPackingGroupBoxesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list packing group boxes service unavailable response has a 5xx status code
func (o *ListPackingGroupBoxesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list packing group boxes service unavailable response a status code equal to that given
func (o *ListPackingGroupBoxesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the list packing group boxes service unavailable response
func (o *ListPackingGroupBoxesServiceUnavailable) Code() int {
	return 503
}

func (o *ListPackingGroupBoxesServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesServiceUnavailable %s", 503, payload)
}

func (o *ListPackingGroupBoxesServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes][%d] listPackingGroupBoxesServiceUnavailable %s", 503, payload)
}

func (o *ListPackingGroupBoxesServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ListPackingGroupBoxesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
