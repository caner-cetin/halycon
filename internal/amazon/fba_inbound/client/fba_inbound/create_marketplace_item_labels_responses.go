// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/fba_inbound/models"
)

// CreateMarketplaceItemLabelsReader is a Reader for the CreateMarketplaceItemLabels structure.
type CreateMarketplaceItemLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateMarketplaceItemLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateMarketplaceItemLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateMarketplaceItemLabelsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateMarketplaceItemLabelsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateMarketplaceItemLabelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateMarketplaceItemLabelsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateMarketplaceItemLabelsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateMarketplaceItemLabelsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateMarketplaceItemLabelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateMarketplaceItemLabelsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /inbound/fba/2024-03-20/items/labels] createMarketplaceItemLabels", response, response.Code())
	}
}

// NewCreateMarketplaceItemLabelsOK creates a CreateMarketplaceItemLabelsOK with default headers values
func NewCreateMarketplaceItemLabelsOK() *CreateMarketplaceItemLabelsOK {
	return &CreateMarketplaceItemLabelsOK{}
}

/*
CreateMarketplaceItemLabelsOK describes a response with status code 200, with default header values.

CreateMarketplaceItemLabels 200 response
*/
type CreateMarketplaceItemLabelsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.CreateMarketplaceItemLabelsResponse
}

// IsSuccess returns true when this create marketplace item labels o k response has a 2xx status code
func (o *CreateMarketplaceItemLabelsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create marketplace item labels o k response has a 3xx status code
func (o *CreateMarketplaceItemLabelsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create marketplace item labels o k response has a 4xx status code
func (o *CreateMarketplaceItemLabelsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create marketplace item labels o k response has a 5xx status code
func (o *CreateMarketplaceItemLabelsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create marketplace item labels o k response a status code equal to that given
func (o *CreateMarketplaceItemLabelsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create marketplace item labels o k response
func (o *CreateMarketplaceItemLabelsOK) Code() int {
	return 200
}

func (o *CreateMarketplaceItemLabelsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsOK %s", 200, payload)
}

func (o *CreateMarketplaceItemLabelsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsOK %s", 200, payload)
}

func (o *CreateMarketplaceItemLabelsOK) GetPayload() *models.CreateMarketplaceItemLabelsResponse {
	return o.Payload
}

func (o *CreateMarketplaceItemLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.CreateMarketplaceItemLabelsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMarketplaceItemLabelsBadRequest creates a CreateMarketplaceItemLabelsBadRequest with default headers values
func NewCreateMarketplaceItemLabelsBadRequest() *CreateMarketplaceItemLabelsBadRequest {
	return &CreateMarketplaceItemLabelsBadRequest{}
}

/*
CreateMarketplaceItemLabelsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateMarketplaceItemLabelsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this create marketplace item labels bad request response has a 2xx status code
func (o *CreateMarketplaceItemLabelsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create marketplace item labels bad request response has a 3xx status code
func (o *CreateMarketplaceItemLabelsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create marketplace item labels bad request response has a 4xx status code
func (o *CreateMarketplaceItemLabelsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create marketplace item labels bad request response has a 5xx status code
func (o *CreateMarketplaceItemLabelsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create marketplace item labels bad request response a status code equal to that given
func (o *CreateMarketplaceItemLabelsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create marketplace item labels bad request response
func (o *CreateMarketplaceItemLabelsBadRequest) Code() int {
	return 400
}

func (o *CreateMarketplaceItemLabelsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsBadRequest %s", 400, payload)
}

func (o *CreateMarketplaceItemLabelsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsBadRequest %s", 400, payload)
}

func (o *CreateMarketplaceItemLabelsBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *CreateMarketplaceItemLabelsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMarketplaceItemLabelsForbidden creates a CreateMarketplaceItemLabelsForbidden with default headers values
func NewCreateMarketplaceItemLabelsForbidden() *CreateMarketplaceItemLabelsForbidden {
	return &CreateMarketplaceItemLabelsForbidden{}
}

/*
CreateMarketplaceItemLabelsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateMarketplaceItemLabelsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this create marketplace item labels forbidden response has a 2xx status code
func (o *CreateMarketplaceItemLabelsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create marketplace item labels forbidden response has a 3xx status code
func (o *CreateMarketplaceItemLabelsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create marketplace item labels forbidden response has a 4xx status code
func (o *CreateMarketplaceItemLabelsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create marketplace item labels forbidden response has a 5xx status code
func (o *CreateMarketplaceItemLabelsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create marketplace item labels forbidden response a status code equal to that given
func (o *CreateMarketplaceItemLabelsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create marketplace item labels forbidden response
func (o *CreateMarketplaceItemLabelsForbidden) Code() int {
	return 403
}

func (o *CreateMarketplaceItemLabelsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsForbidden %s", 403, payload)
}

func (o *CreateMarketplaceItemLabelsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsForbidden %s", 403, payload)
}

func (o *CreateMarketplaceItemLabelsForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *CreateMarketplaceItemLabelsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMarketplaceItemLabelsNotFound creates a CreateMarketplaceItemLabelsNotFound with default headers values
func NewCreateMarketplaceItemLabelsNotFound() *CreateMarketplaceItemLabelsNotFound {
	return &CreateMarketplaceItemLabelsNotFound{}
}

/*
CreateMarketplaceItemLabelsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateMarketplaceItemLabelsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this create marketplace item labels not found response has a 2xx status code
func (o *CreateMarketplaceItemLabelsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create marketplace item labels not found response has a 3xx status code
func (o *CreateMarketplaceItemLabelsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create marketplace item labels not found response has a 4xx status code
func (o *CreateMarketplaceItemLabelsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create marketplace item labels not found response has a 5xx status code
func (o *CreateMarketplaceItemLabelsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create marketplace item labels not found response a status code equal to that given
func (o *CreateMarketplaceItemLabelsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create marketplace item labels not found response
func (o *CreateMarketplaceItemLabelsNotFound) Code() int {
	return 404
}

func (o *CreateMarketplaceItemLabelsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsNotFound %s", 404, payload)
}

func (o *CreateMarketplaceItemLabelsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsNotFound %s", 404, payload)
}

func (o *CreateMarketplaceItemLabelsNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *CreateMarketplaceItemLabelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMarketplaceItemLabelsRequestEntityTooLarge creates a CreateMarketplaceItemLabelsRequestEntityTooLarge with default headers values
func NewCreateMarketplaceItemLabelsRequestEntityTooLarge() *CreateMarketplaceItemLabelsRequestEntityTooLarge {
	return &CreateMarketplaceItemLabelsRequestEntityTooLarge{}
}

/*
CreateMarketplaceItemLabelsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateMarketplaceItemLabelsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this create marketplace item labels request entity too large response has a 2xx status code
func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create marketplace item labels request entity too large response has a 3xx status code
func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create marketplace item labels request entity too large response has a 4xx status code
func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create marketplace item labels request entity too large response has a 5xx status code
func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create marketplace item labels request entity too large response a status code equal to that given
func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the create marketplace item labels request entity too large response
func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) Code() int {
	return 413
}

func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsRequestEntityTooLarge %s", 413, payload)
}

func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsRequestEntityTooLarge %s", 413, payload)
}

func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *CreateMarketplaceItemLabelsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMarketplaceItemLabelsUnsupportedMediaType creates a CreateMarketplaceItemLabelsUnsupportedMediaType with default headers values
func NewCreateMarketplaceItemLabelsUnsupportedMediaType() *CreateMarketplaceItemLabelsUnsupportedMediaType {
	return &CreateMarketplaceItemLabelsUnsupportedMediaType{}
}

/*
CreateMarketplaceItemLabelsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateMarketplaceItemLabelsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this create marketplace item labels unsupported media type response has a 2xx status code
func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create marketplace item labels unsupported media type response has a 3xx status code
func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create marketplace item labels unsupported media type response has a 4xx status code
func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create marketplace item labels unsupported media type response has a 5xx status code
func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create marketplace item labels unsupported media type response a status code equal to that given
func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the create marketplace item labels unsupported media type response
func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) Code() int {
	return 415
}

func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsUnsupportedMediaType %s", 415, payload)
}

func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsUnsupportedMediaType %s", 415, payload)
}

func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *CreateMarketplaceItemLabelsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMarketplaceItemLabelsTooManyRequests creates a CreateMarketplaceItemLabelsTooManyRequests with default headers values
func NewCreateMarketplaceItemLabelsTooManyRequests() *CreateMarketplaceItemLabelsTooManyRequests {
	return &CreateMarketplaceItemLabelsTooManyRequests{}
}

/*
CreateMarketplaceItemLabelsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateMarketplaceItemLabelsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this create marketplace item labels too many requests response has a 2xx status code
func (o *CreateMarketplaceItemLabelsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create marketplace item labels too many requests response has a 3xx status code
func (o *CreateMarketplaceItemLabelsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create marketplace item labels too many requests response has a 4xx status code
func (o *CreateMarketplaceItemLabelsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create marketplace item labels too many requests response has a 5xx status code
func (o *CreateMarketplaceItemLabelsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create marketplace item labels too many requests response a status code equal to that given
func (o *CreateMarketplaceItemLabelsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create marketplace item labels too many requests response
func (o *CreateMarketplaceItemLabelsTooManyRequests) Code() int {
	return 429
}

func (o *CreateMarketplaceItemLabelsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsTooManyRequests %s", 429, payload)
}

func (o *CreateMarketplaceItemLabelsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsTooManyRequests %s", 429, payload)
}

func (o *CreateMarketplaceItemLabelsTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *CreateMarketplaceItemLabelsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMarketplaceItemLabelsInternalServerError creates a CreateMarketplaceItemLabelsInternalServerError with default headers values
func NewCreateMarketplaceItemLabelsInternalServerError() *CreateMarketplaceItemLabelsInternalServerError {
	return &CreateMarketplaceItemLabelsInternalServerError{}
}

/*
CreateMarketplaceItemLabelsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateMarketplaceItemLabelsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this create marketplace item labels internal server error response has a 2xx status code
func (o *CreateMarketplaceItemLabelsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create marketplace item labels internal server error response has a 3xx status code
func (o *CreateMarketplaceItemLabelsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create marketplace item labels internal server error response has a 4xx status code
func (o *CreateMarketplaceItemLabelsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create marketplace item labels internal server error response has a 5xx status code
func (o *CreateMarketplaceItemLabelsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create marketplace item labels internal server error response a status code equal to that given
func (o *CreateMarketplaceItemLabelsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create marketplace item labels internal server error response
func (o *CreateMarketplaceItemLabelsInternalServerError) Code() int {
	return 500
}

func (o *CreateMarketplaceItemLabelsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsInternalServerError %s", 500, payload)
}

func (o *CreateMarketplaceItemLabelsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsInternalServerError %s", 500, payload)
}

func (o *CreateMarketplaceItemLabelsInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *CreateMarketplaceItemLabelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMarketplaceItemLabelsServiceUnavailable creates a CreateMarketplaceItemLabelsServiceUnavailable with default headers values
func NewCreateMarketplaceItemLabelsServiceUnavailable() *CreateMarketplaceItemLabelsServiceUnavailable {
	return &CreateMarketplaceItemLabelsServiceUnavailable{}
}

/*
CreateMarketplaceItemLabelsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateMarketplaceItemLabelsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this create marketplace item labels service unavailable response has a 2xx status code
func (o *CreateMarketplaceItemLabelsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create marketplace item labels service unavailable response has a 3xx status code
func (o *CreateMarketplaceItemLabelsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create marketplace item labels service unavailable response has a 4xx status code
func (o *CreateMarketplaceItemLabelsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create marketplace item labels service unavailable response has a 5xx status code
func (o *CreateMarketplaceItemLabelsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create marketplace item labels service unavailable response a status code equal to that given
func (o *CreateMarketplaceItemLabelsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the create marketplace item labels service unavailable response
func (o *CreateMarketplaceItemLabelsServiceUnavailable) Code() int {
	return 503
}

func (o *CreateMarketplaceItemLabelsServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsServiceUnavailable %s", 503, payload)
}

func (o *CreateMarketplaceItemLabelsServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/labels][%d] createMarketplaceItemLabelsServiceUnavailable %s", 503, payload)
}

func (o *CreateMarketplaceItemLabelsServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *CreateMarketplaceItemLabelsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
