// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/fba_inbound/models"
)

// UpdateShipmentSourceAddressReader is a Reader for the UpdateShipmentSourceAddress structure.
type UpdateShipmentSourceAddressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateShipmentSourceAddressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateShipmentSourceAddressAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateShipmentSourceAddressBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateShipmentSourceAddressForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateShipmentSourceAddressNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateShipmentSourceAddressRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateShipmentSourceAddressUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateShipmentSourceAddressTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateShipmentSourceAddressInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateShipmentSourceAddressServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress] updateShipmentSourceAddress", response, response.Code())
	}
}

// NewUpdateShipmentSourceAddressAccepted creates a UpdateShipmentSourceAddressAccepted with default headers values
func NewUpdateShipmentSourceAddressAccepted() *UpdateShipmentSourceAddressAccepted {
	return &UpdateShipmentSourceAddressAccepted{}
}

/*
UpdateShipmentSourceAddressAccepted describes a response with status code 202, with default header values.

UpdateShipmentSourceAddress 202 response
*/
type UpdateShipmentSourceAddressAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.UpdateShipmentSourceAddressResponse
}

// IsSuccess returns true when this update shipment source address accepted response has a 2xx status code
func (o *UpdateShipmentSourceAddressAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update shipment source address accepted response has a 3xx status code
func (o *UpdateShipmentSourceAddressAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment source address accepted response has a 4xx status code
func (o *UpdateShipmentSourceAddressAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update shipment source address accepted response has a 5xx status code
func (o *UpdateShipmentSourceAddressAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment source address accepted response a status code equal to that given
func (o *UpdateShipmentSourceAddressAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the update shipment source address accepted response
func (o *UpdateShipmentSourceAddressAccepted) Code() int {
	return 202
}

func (o *UpdateShipmentSourceAddressAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressAccepted %s", 202, payload)
}

func (o *UpdateShipmentSourceAddressAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressAccepted %s", 202, payload)
}

func (o *UpdateShipmentSourceAddressAccepted) GetPayload() *models.UpdateShipmentSourceAddressResponse {
	return o.Payload
}

func (o *UpdateShipmentSourceAddressAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.UpdateShipmentSourceAddressResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentSourceAddressBadRequest creates a UpdateShipmentSourceAddressBadRequest with default headers values
func NewUpdateShipmentSourceAddressBadRequest() *UpdateShipmentSourceAddressBadRequest {
	return &UpdateShipmentSourceAddressBadRequest{}
}

/*
UpdateShipmentSourceAddressBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateShipmentSourceAddressBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this update shipment source address bad request response has a 2xx status code
func (o *UpdateShipmentSourceAddressBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment source address bad request response has a 3xx status code
func (o *UpdateShipmentSourceAddressBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment source address bad request response has a 4xx status code
func (o *UpdateShipmentSourceAddressBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment source address bad request response has a 5xx status code
func (o *UpdateShipmentSourceAddressBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment source address bad request response a status code equal to that given
func (o *UpdateShipmentSourceAddressBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update shipment source address bad request response
func (o *UpdateShipmentSourceAddressBadRequest) Code() int {
	return 400
}

func (o *UpdateShipmentSourceAddressBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressBadRequest %s", 400, payload)
}

func (o *UpdateShipmentSourceAddressBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressBadRequest %s", 400, payload)
}

func (o *UpdateShipmentSourceAddressBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentSourceAddressBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentSourceAddressForbidden creates a UpdateShipmentSourceAddressForbidden with default headers values
func NewUpdateShipmentSourceAddressForbidden() *UpdateShipmentSourceAddressForbidden {
	return &UpdateShipmentSourceAddressForbidden{}
}

/*
UpdateShipmentSourceAddressForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateShipmentSourceAddressForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this update shipment source address forbidden response has a 2xx status code
func (o *UpdateShipmentSourceAddressForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment source address forbidden response has a 3xx status code
func (o *UpdateShipmentSourceAddressForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment source address forbidden response has a 4xx status code
func (o *UpdateShipmentSourceAddressForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment source address forbidden response has a 5xx status code
func (o *UpdateShipmentSourceAddressForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment source address forbidden response a status code equal to that given
func (o *UpdateShipmentSourceAddressForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update shipment source address forbidden response
func (o *UpdateShipmentSourceAddressForbidden) Code() int {
	return 403
}

func (o *UpdateShipmentSourceAddressForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressForbidden %s", 403, payload)
}

func (o *UpdateShipmentSourceAddressForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressForbidden %s", 403, payload)
}

func (o *UpdateShipmentSourceAddressForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentSourceAddressForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentSourceAddressNotFound creates a UpdateShipmentSourceAddressNotFound with default headers values
func NewUpdateShipmentSourceAddressNotFound() *UpdateShipmentSourceAddressNotFound {
	return &UpdateShipmentSourceAddressNotFound{}
}

/*
UpdateShipmentSourceAddressNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateShipmentSourceAddressNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this update shipment source address not found response has a 2xx status code
func (o *UpdateShipmentSourceAddressNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment source address not found response has a 3xx status code
func (o *UpdateShipmentSourceAddressNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment source address not found response has a 4xx status code
func (o *UpdateShipmentSourceAddressNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment source address not found response has a 5xx status code
func (o *UpdateShipmentSourceAddressNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment source address not found response a status code equal to that given
func (o *UpdateShipmentSourceAddressNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update shipment source address not found response
func (o *UpdateShipmentSourceAddressNotFound) Code() int {
	return 404
}

func (o *UpdateShipmentSourceAddressNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressNotFound %s", 404, payload)
}

func (o *UpdateShipmentSourceAddressNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressNotFound %s", 404, payload)
}

func (o *UpdateShipmentSourceAddressNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentSourceAddressNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentSourceAddressRequestEntityTooLarge creates a UpdateShipmentSourceAddressRequestEntityTooLarge with default headers values
func NewUpdateShipmentSourceAddressRequestEntityTooLarge() *UpdateShipmentSourceAddressRequestEntityTooLarge {
	return &UpdateShipmentSourceAddressRequestEntityTooLarge{}
}

/*
UpdateShipmentSourceAddressRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateShipmentSourceAddressRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this update shipment source address request entity too large response has a 2xx status code
func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment source address request entity too large response has a 3xx status code
func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment source address request entity too large response has a 4xx status code
func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment source address request entity too large response has a 5xx status code
func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment source address request entity too large response a status code equal to that given
func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the update shipment source address request entity too large response
func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) Code() int {
	return 413
}

func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressRequestEntityTooLarge %s", 413, payload)
}

func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressRequestEntityTooLarge %s", 413, payload)
}

func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentSourceAddressRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentSourceAddressUnsupportedMediaType creates a UpdateShipmentSourceAddressUnsupportedMediaType with default headers values
func NewUpdateShipmentSourceAddressUnsupportedMediaType() *UpdateShipmentSourceAddressUnsupportedMediaType {
	return &UpdateShipmentSourceAddressUnsupportedMediaType{}
}

/*
UpdateShipmentSourceAddressUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateShipmentSourceAddressUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this update shipment source address unsupported media type response has a 2xx status code
func (o *UpdateShipmentSourceAddressUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment source address unsupported media type response has a 3xx status code
func (o *UpdateShipmentSourceAddressUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment source address unsupported media type response has a 4xx status code
func (o *UpdateShipmentSourceAddressUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment source address unsupported media type response has a 5xx status code
func (o *UpdateShipmentSourceAddressUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment source address unsupported media type response a status code equal to that given
func (o *UpdateShipmentSourceAddressUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the update shipment source address unsupported media type response
func (o *UpdateShipmentSourceAddressUnsupportedMediaType) Code() int {
	return 415
}

func (o *UpdateShipmentSourceAddressUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressUnsupportedMediaType %s", 415, payload)
}

func (o *UpdateShipmentSourceAddressUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressUnsupportedMediaType %s", 415, payload)
}

func (o *UpdateShipmentSourceAddressUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentSourceAddressUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentSourceAddressTooManyRequests creates a UpdateShipmentSourceAddressTooManyRequests with default headers values
func NewUpdateShipmentSourceAddressTooManyRequests() *UpdateShipmentSourceAddressTooManyRequests {
	return &UpdateShipmentSourceAddressTooManyRequests{}
}

/*
UpdateShipmentSourceAddressTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateShipmentSourceAddressTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this update shipment source address too many requests response has a 2xx status code
func (o *UpdateShipmentSourceAddressTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment source address too many requests response has a 3xx status code
func (o *UpdateShipmentSourceAddressTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment source address too many requests response has a 4xx status code
func (o *UpdateShipmentSourceAddressTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment source address too many requests response has a 5xx status code
func (o *UpdateShipmentSourceAddressTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment source address too many requests response a status code equal to that given
func (o *UpdateShipmentSourceAddressTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update shipment source address too many requests response
func (o *UpdateShipmentSourceAddressTooManyRequests) Code() int {
	return 429
}

func (o *UpdateShipmentSourceAddressTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressTooManyRequests %s", 429, payload)
}

func (o *UpdateShipmentSourceAddressTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressTooManyRequests %s", 429, payload)
}

func (o *UpdateShipmentSourceAddressTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentSourceAddressTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentSourceAddressInternalServerError creates a UpdateShipmentSourceAddressInternalServerError with default headers values
func NewUpdateShipmentSourceAddressInternalServerError() *UpdateShipmentSourceAddressInternalServerError {
	return &UpdateShipmentSourceAddressInternalServerError{}
}

/*
UpdateShipmentSourceAddressInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateShipmentSourceAddressInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this update shipment source address internal server error response has a 2xx status code
func (o *UpdateShipmentSourceAddressInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment source address internal server error response has a 3xx status code
func (o *UpdateShipmentSourceAddressInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment source address internal server error response has a 4xx status code
func (o *UpdateShipmentSourceAddressInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update shipment source address internal server error response has a 5xx status code
func (o *UpdateShipmentSourceAddressInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update shipment source address internal server error response a status code equal to that given
func (o *UpdateShipmentSourceAddressInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update shipment source address internal server error response
func (o *UpdateShipmentSourceAddressInternalServerError) Code() int {
	return 500
}

func (o *UpdateShipmentSourceAddressInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressInternalServerError %s", 500, payload)
}

func (o *UpdateShipmentSourceAddressInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressInternalServerError %s", 500, payload)
}

func (o *UpdateShipmentSourceAddressInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentSourceAddressInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentSourceAddressServiceUnavailable creates a UpdateShipmentSourceAddressServiceUnavailable with default headers values
func NewUpdateShipmentSourceAddressServiceUnavailable() *UpdateShipmentSourceAddressServiceUnavailable {
	return &UpdateShipmentSourceAddressServiceUnavailable{}
}

/*
UpdateShipmentSourceAddressServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateShipmentSourceAddressServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this update shipment source address service unavailable response has a 2xx status code
func (o *UpdateShipmentSourceAddressServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment source address service unavailable response has a 3xx status code
func (o *UpdateShipmentSourceAddressServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment source address service unavailable response has a 4xx status code
func (o *UpdateShipmentSourceAddressServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update shipment source address service unavailable response has a 5xx status code
func (o *UpdateShipmentSourceAddressServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update shipment source address service unavailable response a status code equal to that given
func (o *UpdateShipmentSourceAddressServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the update shipment source address service unavailable response
func (o *UpdateShipmentSourceAddressServiceUnavailable) Code() int {
	return 503
}

func (o *UpdateShipmentSourceAddressServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressServiceUnavailable %s", 503, payload)
}

func (o *UpdateShipmentSourceAddressServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress][%d] updateShipmentSourceAddressServiceUnavailable %s", 503, payload)
}

func (o *UpdateShipmentSourceAddressServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentSourceAddressServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
