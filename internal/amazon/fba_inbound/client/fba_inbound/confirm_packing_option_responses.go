// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/fba_inbound/models"
)

// ConfirmPackingOptionReader is a Reader for the ConfirmPackingOption structure.
type ConfirmPackingOptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmPackingOptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewConfirmPackingOptionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfirmPackingOptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfirmPackingOptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfirmPackingOptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewConfirmPackingOptionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewConfirmPackingOptionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConfirmPackingOptionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfirmPackingOptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfirmPackingOptionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation] confirmPackingOption", response, response.Code())
	}
}

// NewConfirmPackingOptionAccepted creates a ConfirmPackingOptionAccepted with default headers values
func NewConfirmPackingOptionAccepted() *ConfirmPackingOptionAccepted {
	return &ConfirmPackingOptionAccepted{}
}

/*
ConfirmPackingOptionAccepted describes a response with status code 202, with default header values.

ConfirmPackingOption 202 response
*/
type ConfirmPackingOptionAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ConfirmPackingOptionResponse
}

// IsSuccess returns true when this confirm packing option accepted response has a 2xx status code
func (o *ConfirmPackingOptionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm packing option accepted response has a 3xx status code
func (o *ConfirmPackingOptionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm packing option accepted response has a 4xx status code
func (o *ConfirmPackingOptionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm packing option accepted response has a 5xx status code
func (o *ConfirmPackingOptionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm packing option accepted response a status code equal to that given
func (o *ConfirmPackingOptionAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the confirm packing option accepted response
func (o *ConfirmPackingOptionAccepted) Code() int {
	return 202
}

func (o *ConfirmPackingOptionAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionAccepted %s", 202, payload)
}

func (o *ConfirmPackingOptionAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionAccepted %s", 202, payload)
}

func (o *ConfirmPackingOptionAccepted) GetPayload() *models.ConfirmPackingOptionResponse {
	return o.Payload
}

func (o *ConfirmPackingOptionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ConfirmPackingOptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPackingOptionBadRequest creates a ConfirmPackingOptionBadRequest with default headers values
func NewConfirmPackingOptionBadRequest() *ConfirmPackingOptionBadRequest {
	return &ConfirmPackingOptionBadRequest{}
}

/*
ConfirmPackingOptionBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ConfirmPackingOptionBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm packing option bad request response has a 2xx status code
func (o *ConfirmPackingOptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm packing option bad request response has a 3xx status code
func (o *ConfirmPackingOptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm packing option bad request response has a 4xx status code
func (o *ConfirmPackingOptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm packing option bad request response has a 5xx status code
func (o *ConfirmPackingOptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm packing option bad request response a status code equal to that given
func (o *ConfirmPackingOptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the confirm packing option bad request response
func (o *ConfirmPackingOptionBadRequest) Code() int {
	return 400
}

func (o *ConfirmPackingOptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionBadRequest %s", 400, payload)
}

func (o *ConfirmPackingOptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionBadRequest %s", 400, payload)
}

func (o *ConfirmPackingOptionBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmPackingOptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPackingOptionForbidden creates a ConfirmPackingOptionForbidden with default headers values
func NewConfirmPackingOptionForbidden() *ConfirmPackingOptionForbidden {
	return &ConfirmPackingOptionForbidden{}
}

/*
ConfirmPackingOptionForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ConfirmPackingOptionForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm packing option forbidden response has a 2xx status code
func (o *ConfirmPackingOptionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm packing option forbidden response has a 3xx status code
func (o *ConfirmPackingOptionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm packing option forbidden response has a 4xx status code
func (o *ConfirmPackingOptionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm packing option forbidden response has a 5xx status code
func (o *ConfirmPackingOptionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm packing option forbidden response a status code equal to that given
func (o *ConfirmPackingOptionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the confirm packing option forbidden response
func (o *ConfirmPackingOptionForbidden) Code() int {
	return 403
}

func (o *ConfirmPackingOptionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionForbidden %s", 403, payload)
}

func (o *ConfirmPackingOptionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionForbidden %s", 403, payload)
}

func (o *ConfirmPackingOptionForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmPackingOptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPackingOptionNotFound creates a ConfirmPackingOptionNotFound with default headers values
func NewConfirmPackingOptionNotFound() *ConfirmPackingOptionNotFound {
	return &ConfirmPackingOptionNotFound{}
}

/*
ConfirmPackingOptionNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ConfirmPackingOptionNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm packing option not found response has a 2xx status code
func (o *ConfirmPackingOptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm packing option not found response has a 3xx status code
func (o *ConfirmPackingOptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm packing option not found response has a 4xx status code
func (o *ConfirmPackingOptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm packing option not found response has a 5xx status code
func (o *ConfirmPackingOptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm packing option not found response a status code equal to that given
func (o *ConfirmPackingOptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the confirm packing option not found response
func (o *ConfirmPackingOptionNotFound) Code() int {
	return 404
}

func (o *ConfirmPackingOptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionNotFound %s", 404, payload)
}

func (o *ConfirmPackingOptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionNotFound %s", 404, payload)
}

func (o *ConfirmPackingOptionNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmPackingOptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPackingOptionRequestEntityTooLarge creates a ConfirmPackingOptionRequestEntityTooLarge with default headers values
func NewConfirmPackingOptionRequestEntityTooLarge() *ConfirmPackingOptionRequestEntityTooLarge {
	return &ConfirmPackingOptionRequestEntityTooLarge{}
}

/*
ConfirmPackingOptionRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ConfirmPackingOptionRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm packing option request entity too large response has a 2xx status code
func (o *ConfirmPackingOptionRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm packing option request entity too large response has a 3xx status code
func (o *ConfirmPackingOptionRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm packing option request entity too large response has a 4xx status code
func (o *ConfirmPackingOptionRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm packing option request entity too large response has a 5xx status code
func (o *ConfirmPackingOptionRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm packing option request entity too large response a status code equal to that given
func (o *ConfirmPackingOptionRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the confirm packing option request entity too large response
func (o *ConfirmPackingOptionRequestEntityTooLarge) Code() int {
	return 413
}

func (o *ConfirmPackingOptionRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionRequestEntityTooLarge %s", 413, payload)
}

func (o *ConfirmPackingOptionRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionRequestEntityTooLarge %s", 413, payload)
}

func (o *ConfirmPackingOptionRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmPackingOptionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPackingOptionUnsupportedMediaType creates a ConfirmPackingOptionUnsupportedMediaType with default headers values
func NewConfirmPackingOptionUnsupportedMediaType() *ConfirmPackingOptionUnsupportedMediaType {
	return &ConfirmPackingOptionUnsupportedMediaType{}
}

/*
ConfirmPackingOptionUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ConfirmPackingOptionUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm packing option unsupported media type response has a 2xx status code
func (o *ConfirmPackingOptionUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm packing option unsupported media type response has a 3xx status code
func (o *ConfirmPackingOptionUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm packing option unsupported media type response has a 4xx status code
func (o *ConfirmPackingOptionUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm packing option unsupported media type response has a 5xx status code
func (o *ConfirmPackingOptionUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm packing option unsupported media type response a status code equal to that given
func (o *ConfirmPackingOptionUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the confirm packing option unsupported media type response
func (o *ConfirmPackingOptionUnsupportedMediaType) Code() int {
	return 415
}

func (o *ConfirmPackingOptionUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionUnsupportedMediaType %s", 415, payload)
}

func (o *ConfirmPackingOptionUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionUnsupportedMediaType %s", 415, payload)
}

func (o *ConfirmPackingOptionUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmPackingOptionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPackingOptionTooManyRequests creates a ConfirmPackingOptionTooManyRequests with default headers values
func NewConfirmPackingOptionTooManyRequests() *ConfirmPackingOptionTooManyRequests {
	return &ConfirmPackingOptionTooManyRequests{}
}

/*
ConfirmPackingOptionTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ConfirmPackingOptionTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm packing option too many requests response has a 2xx status code
func (o *ConfirmPackingOptionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm packing option too many requests response has a 3xx status code
func (o *ConfirmPackingOptionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm packing option too many requests response has a 4xx status code
func (o *ConfirmPackingOptionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm packing option too many requests response has a 5xx status code
func (o *ConfirmPackingOptionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm packing option too many requests response a status code equal to that given
func (o *ConfirmPackingOptionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the confirm packing option too many requests response
func (o *ConfirmPackingOptionTooManyRequests) Code() int {
	return 429
}

func (o *ConfirmPackingOptionTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionTooManyRequests %s", 429, payload)
}

func (o *ConfirmPackingOptionTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionTooManyRequests %s", 429, payload)
}

func (o *ConfirmPackingOptionTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmPackingOptionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPackingOptionInternalServerError creates a ConfirmPackingOptionInternalServerError with default headers values
func NewConfirmPackingOptionInternalServerError() *ConfirmPackingOptionInternalServerError {
	return &ConfirmPackingOptionInternalServerError{}
}

/*
ConfirmPackingOptionInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ConfirmPackingOptionInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm packing option internal server error response has a 2xx status code
func (o *ConfirmPackingOptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm packing option internal server error response has a 3xx status code
func (o *ConfirmPackingOptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm packing option internal server error response has a 4xx status code
func (o *ConfirmPackingOptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm packing option internal server error response has a 5xx status code
func (o *ConfirmPackingOptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm packing option internal server error response a status code equal to that given
func (o *ConfirmPackingOptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the confirm packing option internal server error response
func (o *ConfirmPackingOptionInternalServerError) Code() int {
	return 500
}

func (o *ConfirmPackingOptionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionInternalServerError %s", 500, payload)
}

func (o *ConfirmPackingOptionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionInternalServerError %s", 500, payload)
}

func (o *ConfirmPackingOptionInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmPackingOptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPackingOptionServiceUnavailable creates a ConfirmPackingOptionServiceUnavailable with default headers values
func NewConfirmPackingOptionServiceUnavailable() *ConfirmPackingOptionServiceUnavailable {
	return &ConfirmPackingOptionServiceUnavailable{}
}

/*
ConfirmPackingOptionServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ConfirmPackingOptionServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm packing option service unavailable response has a 2xx status code
func (o *ConfirmPackingOptionServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm packing option service unavailable response has a 3xx status code
func (o *ConfirmPackingOptionServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm packing option service unavailable response has a 4xx status code
func (o *ConfirmPackingOptionServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm packing option service unavailable response has a 5xx status code
func (o *ConfirmPackingOptionServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm packing option service unavailable response a status code equal to that given
func (o *ConfirmPackingOptionServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the confirm packing option service unavailable response
func (o *ConfirmPackingOptionServiceUnavailable) Code() int {
	return 503
}

func (o *ConfirmPackingOptionServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionServiceUnavailable %s", 503, payload)
}

func (o *ConfirmPackingOptionServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation][%d] confirmPackingOptionServiceUnavailable %s", 503, payload)
}

func (o *ConfirmPackingOptionServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmPackingOptionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
