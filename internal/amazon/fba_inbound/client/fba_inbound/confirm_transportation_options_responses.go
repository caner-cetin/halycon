// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/fba_inbound/models"
)

// ConfirmTransportationOptionsReader is a Reader for the ConfirmTransportationOptions structure.
type ConfirmTransportationOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmTransportationOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewConfirmTransportationOptionsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfirmTransportationOptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfirmTransportationOptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfirmTransportationOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewConfirmTransportationOptionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewConfirmTransportationOptionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConfirmTransportationOptionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfirmTransportationOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfirmTransportationOptionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation] confirmTransportationOptions", response, response.Code())
	}
}

// NewConfirmTransportationOptionsAccepted creates a ConfirmTransportationOptionsAccepted with default headers values
func NewConfirmTransportationOptionsAccepted() *ConfirmTransportationOptionsAccepted {
	return &ConfirmTransportationOptionsAccepted{}
}

/*
ConfirmTransportationOptionsAccepted describes a response with status code 202, with default header values.

ConfirmTransportationOptions 202 response
*/
type ConfirmTransportationOptionsAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ConfirmTransportationOptionsResponse
}

// IsSuccess returns true when this confirm transportation options accepted response has a 2xx status code
func (o *ConfirmTransportationOptionsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm transportation options accepted response has a 3xx status code
func (o *ConfirmTransportationOptionsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transportation options accepted response has a 4xx status code
func (o *ConfirmTransportationOptionsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm transportation options accepted response has a 5xx status code
func (o *ConfirmTransportationOptionsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transportation options accepted response a status code equal to that given
func (o *ConfirmTransportationOptionsAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the confirm transportation options accepted response
func (o *ConfirmTransportationOptionsAccepted) Code() int {
	return 202
}

func (o *ConfirmTransportationOptionsAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsAccepted %s", 202, payload)
}

func (o *ConfirmTransportationOptionsAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsAccepted %s", 202, payload)
}

func (o *ConfirmTransportationOptionsAccepted) GetPayload() *models.ConfirmTransportationOptionsResponse {
	return o.Payload
}

func (o *ConfirmTransportationOptionsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ConfirmTransportationOptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportationOptionsBadRequest creates a ConfirmTransportationOptionsBadRequest with default headers values
func NewConfirmTransportationOptionsBadRequest() *ConfirmTransportationOptionsBadRequest {
	return &ConfirmTransportationOptionsBadRequest{}
}

/*
ConfirmTransportationOptionsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ConfirmTransportationOptionsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm transportation options bad request response has a 2xx status code
func (o *ConfirmTransportationOptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transportation options bad request response has a 3xx status code
func (o *ConfirmTransportationOptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transportation options bad request response has a 4xx status code
func (o *ConfirmTransportationOptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transportation options bad request response has a 5xx status code
func (o *ConfirmTransportationOptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transportation options bad request response a status code equal to that given
func (o *ConfirmTransportationOptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the confirm transportation options bad request response
func (o *ConfirmTransportationOptionsBadRequest) Code() int {
	return 400
}

func (o *ConfirmTransportationOptionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsBadRequest %s", 400, payload)
}

func (o *ConfirmTransportationOptionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsBadRequest %s", 400, payload)
}

func (o *ConfirmTransportationOptionsBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmTransportationOptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportationOptionsForbidden creates a ConfirmTransportationOptionsForbidden with default headers values
func NewConfirmTransportationOptionsForbidden() *ConfirmTransportationOptionsForbidden {
	return &ConfirmTransportationOptionsForbidden{}
}

/*
ConfirmTransportationOptionsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ConfirmTransportationOptionsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm transportation options forbidden response has a 2xx status code
func (o *ConfirmTransportationOptionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transportation options forbidden response has a 3xx status code
func (o *ConfirmTransportationOptionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transportation options forbidden response has a 4xx status code
func (o *ConfirmTransportationOptionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transportation options forbidden response has a 5xx status code
func (o *ConfirmTransportationOptionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transportation options forbidden response a status code equal to that given
func (o *ConfirmTransportationOptionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the confirm transportation options forbidden response
func (o *ConfirmTransportationOptionsForbidden) Code() int {
	return 403
}

func (o *ConfirmTransportationOptionsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsForbidden %s", 403, payload)
}

func (o *ConfirmTransportationOptionsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsForbidden %s", 403, payload)
}

func (o *ConfirmTransportationOptionsForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmTransportationOptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportationOptionsNotFound creates a ConfirmTransportationOptionsNotFound with default headers values
func NewConfirmTransportationOptionsNotFound() *ConfirmTransportationOptionsNotFound {
	return &ConfirmTransportationOptionsNotFound{}
}

/*
ConfirmTransportationOptionsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ConfirmTransportationOptionsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm transportation options not found response has a 2xx status code
func (o *ConfirmTransportationOptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transportation options not found response has a 3xx status code
func (o *ConfirmTransportationOptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transportation options not found response has a 4xx status code
func (o *ConfirmTransportationOptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transportation options not found response has a 5xx status code
func (o *ConfirmTransportationOptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transportation options not found response a status code equal to that given
func (o *ConfirmTransportationOptionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the confirm transportation options not found response
func (o *ConfirmTransportationOptionsNotFound) Code() int {
	return 404
}

func (o *ConfirmTransportationOptionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsNotFound %s", 404, payload)
}

func (o *ConfirmTransportationOptionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsNotFound %s", 404, payload)
}

func (o *ConfirmTransportationOptionsNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmTransportationOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportationOptionsRequestEntityTooLarge creates a ConfirmTransportationOptionsRequestEntityTooLarge with default headers values
func NewConfirmTransportationOptionsRequestEntityTooLarge() *ConfirmTransportationOptionsRequestEntityTooLarge {
	return &ConfirmTransportationOptionsRequestEntityTooLarge{}
}

/*
ConfirmTransportationOptionsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ConfirmTransportationOptionsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm transportation options request entity too large response has a 2xx status code
func (o *ConfirmTransportationOptionsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transportation options request entity too large response has a 3xx status code
func (o *ConfirmTransportationOptionsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transportation options request entity too large response has a 4xx status code
func (o *ConfirmTransportationOptionsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transportation options request entity too large response has a 5xx status code
func (o *ConfirmTransportationOptionsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transportation options request entity too large response a status code equal to that given
func (o *ConfirmTransportationOptionsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the confirm transportation options request entity too large response
func (o *ConfirmTransportationOptionsRequestEntityTooLarge) Code() int {
	return 413
}

func (o *ConfirmTransportationOptionsRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsRequestEntityTooLarge %s", 413, payload)
}

func (o *ConfirmTransportationOptionsRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsRequestEntityTooLarge %s", 413, payload)
}

func (o *ConfirmTransportationOptionsRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmTransportationOptionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportationOptionsUnsupportedMediaType creates a ConfirmTransportationOptionsUnsupportedMediaType with default headers values
func NewConfirmTransportationOptionsUnsupportedMediaType() *ConfirmTransportationOptionsUnsupportedMediaType {
	return &ConfirmTransportationOptionsUnsupportedMediaType{}
}

/*
ConfirmTransportationOptionsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ConfirmTransportationOptionsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm transportation options unsupported media type response has a 2xx status code
func (o *ConfirmTransportationOptionsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transportation options unsupported media type response has a 3xx status code
func (o *ConfirmTransportationOptionsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transportation options unsupported media type response has a 4xx status code
func (o *ConfirmTransportationOptionsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transportation options unsupported media type response has a 5xx status code
func (o *ConfirmTransportationOptionsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transportation options unsupported media type response a status code equal to that given
func (o *ConfirmTransportationOptionsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the confirm transportation options unsupported media type response
func (o *ConfirmTransportationOptionsUnsupportedMediaType) Code() int {
	return 415
}

func (o *ConfirmTransportationOptionsUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsUnsupportedMediaType %s", 415, payload)
}

func (o *ConfirmTransportationOptionsUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsUnsupportedMediaType %s", 415, payload)
}

func (o *ConfirmTransportationOptionsUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmTransportationOptionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportationOptionsTooManyRequests creates a ConfirmTransportationOptionsTooManyRequests with default headers values
func NewConfirmTransportationOptionsTooManyRequests() *ConfirmTransportationOptionsTooManyRequests {
	return &ConfirmTransportationOptionsTooManyRequests{}
}

/*
ConfirmTransportationOptionsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ConfirmTransportationOptionsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm transportation options too many requests response has a 2xx status code
func (o *ConfirmTransportationOptionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transportation options too many requests response has a 3xx status code
func (o *ConfirmTransportationOptionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transportation options too many requests response has a 4xx status code
func (o *ConfirmTransportationOptionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transportation options too many requests response has a 5xx status code
func (o *ConfirmTransportationOptionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transportation options too many requests response a status code equal to that given
func (o *ConfirmTransportationOptionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the confirm transportation options too many requests response
func (o *ConfirmTransportationOptionsTooManyRequests) Code() int {
	return 429
}

func (o *ConfirmTransportationOptionsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsTooManyRequests %s", 429, payload)
}

func (o *ConfirmTransportationOptionsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsTooManyRequests %s", 429, payload)
}

func (o *ConfirmTransportationOptionsTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmTransportationOptionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportationOptionsInternalServerError creates a ConfirmTransportationOptionsInternalServerError with default headers values
func NewConfirmTransportationOptionsInternalServerError() *ConfirmTransportationOptionsInternalServerError {
	return &ConfirmTransportationOptionsInternalServerError{}
}

/*
ConfirmTransportationOptionsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ConfirmTransportationOptionsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm transportation options internal server error response has a 2xx status code
func (o *ConfirmTransportationOptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transportation options internal server error response has a 3xx status code
func (o *ConfirmTransportationOptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transportation options internal server error response has a 4xx status code
func (o *ConfirmTransportationOptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm transportation options internal server error response has a 5xx status code
func (o *ConfirmTransportationOptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm transportation options internal server error response a status code equal to that given
func (o *ConfirmTransportationOptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the confirm transportation options internal server error response
func (o *ConfirmTransportationOptionsInternalServerError) Code() int {
	return 500
}

func (o *ConfirmTransportationOptionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsInternalServerError %s", 500, payload)
}

func (o *ConfirmTransportationOptionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsInternalServerError %s", 500, payload)
}

func (o *ConfirmTransportationOptionsInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmTransportationOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportationOptionsServiceUnavailable creates a ConfirmTransportationOptionsServiceUnavailable with default headers values
func NewConfirmTransportationOptionsServiceUnavailable() *ConfirmTransportationOptionsServiceUnavailable {
	return &ConfirmTransportationOptionsServiceUnavailable{}
}

/*
ConfirmTransportationOptionsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ConfirmTransportationOptionsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this confirm transportation options service unavailable response has a 2xx status code
func (o *ConfirmTransportationOptionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transportation options service unavailable response has a 3xx status code
func (o *ConfirmTransportationOptionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transportation options service unavailable response has a 4xx status code
func (o *ConfirmTransportationOptionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm transportation options service unavailable response has a 5xx status code
func (o *ConfirmTransportationOptionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm transportation options service unavailable response a status code equal to that given
func (o *ConfirmTransportationOptionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the confirm transportation options service unavailable response
func (o *ConfirmTransportationOptionsServiceUnavailable) Code() int {
	return 503
}

func (o *ConfirmTransportationOptionsServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsServiceUnavailable %s", 503, payload)
}

func (o *ConfirmTransportationOptionsServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation][%d] confirmTransportationOptionsServiceUnavailable %s", 503, payload)
}

func (o *ConfirmTransportationOptionsServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *ConfirmTransportationOptionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
