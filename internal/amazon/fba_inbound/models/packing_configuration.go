// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PackingConfiguration A way to configure this packing option. Some box content information sources might not be allowed. Non-standard minimum and maximum box weights might be enforced.
//
// swagger:model PackingConfiguration
type PackingConfiguration struct {

	// The box content information sources that are allowed.
	BoxPackingMethods []BoxContentInformationSource `json:"boxPackingMethods"`

	// box requirements
	BoxRequirements *BoxRequirements `json:"boxRequirements,omitempty"`

	// A list of supported shipping requirements for this packing configuration.
	ShippingRequirements []*ShippingRequirements `json:"shippingRequirements"`
}

// Validate validates this packing configuration
func (m *PackingConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoxPackingMethods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoxRequirements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingRequirements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackingConfiguration) validateBoxPackingMethods(formats strfmt.Registry) error {
	if swag.IsZero(m.BoxPackingMethods) { // not required
		return nil
	}

	for i := 0; i < len(m.BoxPackingMethods); i++ {

		if err := m.BoxPackingMethods[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boxPackingMethods" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boxPackingMethods" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PackingConfiguration) validateBoxRequirements(formats strfmt.Registry) error {
	if swag.IsZero(m.BoxRequirements) { // not required
		return nil
	}

	if m.BoxRequirements != nil {
		if err := m.BoxRequirements.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boxRequirements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boxRequirements")
			}
			return err
		}
	}

	return nil
}

func (m *PackingConfiguration) validateShippingRequirements(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingRequirements) { // not required
		return nil
	}

	for i := 0; i < len(m.ShippingRequirements); i++ {
		if swag.IsZero(m.ShippingRequirements[i]) { // not required
			continue
		}

		if m.ShippingRequirements[i] != nil {
			if err := m.ShippingRequirements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shippingRequirements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shippingRequirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this packing configuration based on the context it is used
func (m *PackingConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBoxPackingMethods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBoxRequirements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingRequirements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackingConfiguration) contextValidateBoxPackingMethods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BoxPackingMethods); i++ {

		if swag.IsZero(m.BoxPackingMethods[i]) { // not required
			return nil
		}

		if err := m.BoxPackingMethods[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boxPackingMethods" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boxPackingMethods" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PackingConfiguration) contextValidateBoxRequirements(ctx context.Context, formats strfmt.Registry) error {

	if m.BoxRequirements != nil {

		if swag.IsZero(m.BoxRequirements) { // not required
			return nil
		}

		if err := m.BoxRequirements.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boxRequirements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boxRequirements")
			}
			return err
		}
	}

	return nil
}

func (m *PackingConfiguration) contextValidateShippingRequirements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShippingRequirements); i++ {

		if m.ShippingRequirements[i] != nil {

			if swag.IsZero(m.ShippingRequirements[i]) { // not required
				return nil
			}

			if err := m.ShippingRequirements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shippingRequirements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shippingRequirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackingConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackingConfiguration) UnmarshalBinary(b []byte) error {
	var res PackingConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
