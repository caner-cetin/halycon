// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WeightRange The range of weights that are allowed for a package.
//
// swagger:model WeightRange
type WeightRange struct {

	// Maximum allowed weight.
	// Required: true
	// Maximum: 100000
	// Minimum: 0
	Maximum *float64 `json:"maximum"`

	// Minimum allowed weight.
	// Required: true
	// Maximum: 100000
	// Minimum: 0
	Minimum *float64 `json:"minimum"`

	// unit
	// Required: true
	Unit *UnitOfWeight `json:"unit"`
}

// Validate validates this weight range
func (m *WeightRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaximum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeightRange) validateMaximum(formats strfmt.Registry) error {

	if err := validate.Required("maximum", "body", m.Maximum); err != nil {
		return err
	}

	if err := validate.Minimum("maximum", "body", *m.Maximum, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("maximum", "body", *m.Maximum, 100000, false); err != nil {
		return err
	}

	return nil
}

func (m *WeightRange) validateMinimum(formats strfmt.Registry) error {

	if err := validate.Required("minimum", "body", m.Minimum); err != nil {
		return err
	}

	if err := validate.Minimum("minimum", "body", *m.Minimum, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("minimum", "body", *m.Minimum, 100000, false); err != nil {
		return err
	}

	return nil
}

func (m *WeightRange) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	if m.Unit != nil {
		if err := m.Unit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this weight range based on the context it is used
func (m *WeightRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeightRange) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.Unit != nil {

		if err := m.Unit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WeightRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WeightRange) UnmarshalBinary(b []byte) error {
	var res WeightRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
