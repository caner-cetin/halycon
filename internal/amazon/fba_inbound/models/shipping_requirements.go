// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShippingRequirements The possible shipping modes for the packing option for a given shipping solution or program. Available solutions are Amazon-Partnered Carrier and Use Your Own Carrier. Available modes are ground small parcel, freight less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express.
//
// swagger:model ShippingRequirements
type ShippingRequirements struct {

	// Available shipment modes for this shipping program.
	// Required: true
	Modes []string `json:"modes"`

	// Shipping program for the option. Can be: `AMAZON_PARTNERED_CARRIER`, `USE_YOUR_OWN_CARRIER`.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	Solution *string `json:"solution"`
}

// Validate validates this shipping requirements
func (m *ShippingRequirements) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingRequirements) validateModes(formats strfmt.Registry) error {

	if err := validate.Required("modes", "body", m.Modes); err != nil {
		return err
	}

	for i := 0; i < len(m.Modes); i++ {

		if err := validate.MinLength("modes"+"."+strconv.Itoa(i), "body", m.Modes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("modes"+"."+strconv.Itoa(i), "body", m.Modes[i], 1024); err != nil {
			return err
		}

		if err := validate.Pattern("modes"+"."+strconv.Itoa(i), "body", m.Modes[i], `^[a-zA-Z0-9-._\s]*$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *ShippingRequirements) validateSolution(formats strfmt.Registry) error {

	if err := validate.Required("solution", "body", m.Solution); err != nil {
		return err
	}

	if err := validate.MinLength("solution", "body", *m.Solution, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("solution", "body", *m.Solution, 1024); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this shipping requirements based on context it is used
func (m *ShippingRequirements) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShippingRequirements) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingRequirements) UnmarshalBinary(b []byte) error {
	var res ShippingRequirements
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
