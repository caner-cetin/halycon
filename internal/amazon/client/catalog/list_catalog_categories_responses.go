// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/models"
)

// ListCatalogCategoriesReader is a Reader for the ListCatalogCategories structure.
type ListCatalogCategoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListCatalogCategoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListCatalogCategoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListCatalogCategoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListCatalogCategoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListCatalogCategoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListCatalogCategoriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListCatalogCategoriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListCatalogCategoriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListCatalogCategoriesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /catalog/v0/categories] listCatalogCategories", response, response.Code())
	}
}

// NewListCatalogCategoriesOK creates a ListCatalogCategoriesOK with default headers values
func NewListCatalogCategoriesOK() *ListCatalogCategoriesOK {
	return &ListCatalogCategoriesOK{}
}

/*
ListCatalogCategoriesOK describes a response with status code 200, with default header values.

Success.
*/
type ListCatalogCategoriesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListCatalogCategoriesResponse
}

// IsSuccess returns true when this list catalog categories o k response has a 2xx status code
func (o *ListCatalogCategoriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list catalog categories o k response has a 3xx status code
func (o *ListCatalogCategoriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list catalog categories o k response has a 4xx status code
func (o *ListCatalogCategoriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list catalog categories o k response has a 5xx status code
func (o *ListCatalogCategoriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list catalog categories o k response a status code equal to that given
func (o *ListCatalogCategoriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list catalog categories o k response
func (o *ListCatalogCategoriesOK) Code() int {
	return 200
}

func (o *ListCatalogCategoriesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesOK %s", 200, payload)
}

func (o *ListCatalogCategoriesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesOK %s", 200, payload)
}

func (o *ListCatalogCategoriesOK) GetPayload() *models.ListCatalogCategoriesResponse {
	return o.Payload
}

func (o *ListCatalogCategoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListCatalogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCatalogCategoriesBadRequest creates a ListCatalogCategoriesBadRequest with default headers values
func NewListCatalogCategoriesBadRequest() *ListCatalogCategoriesBadRequest {
	return &ListCatalogCategoriesBadRequest{}
}

/*
ListCatalogCategoriesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListCatalogCategoriesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListCatalogCategoriesResponse
}

// IsSuccess returns true when this list catalog categories bad request response has a 2xx status code
func (o *ListCatalogCategoriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list catalog categories bad request response has a 3xx status code
func (o *ListCatalogCategoriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list catalog categories bad request response has a 4xx status code
func (o *ListCatalogCategoriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list catalog categories bad request response has a 5xx status code
func (o *ListCatalogCategoriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list catalog categories bad request response a status code equal to that given
func (o *ListCatalogCategoriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list catalog categories bad request response
func (o *ListCatalogCategoriesBadRequest) Code() int {
	return 400
}

func (o *ListCatalogCategoriesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesBadRequest %s", 400, payload)
}

func (o *ListCatalogCategoriesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesBadRequest %s", 400, payload)
}

func (o *ListCatalogCategoriesBadRequest) GetPayload() *models.ListCatalogCategoriesResponse {
	return o.Payload
}

func (o *ListCatalogCategoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListCatalogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCatalogCategoriesUnauthorized creates a ListCatalogCategoriesUnauthorized with default headers values
func NewListCatalogCategoriesUnauthorized() *ListCatalogCategoriesUnauthorized {
	return &ListCatalogCategoriesUnauthorized{}
}

/*
ListCatalogCategoriesUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type ListCatalogCategoriesUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListCatalogCategoriesResponse
}

// IsSuccess returns true when this list catalog categories unauthorized response has a 2xx status code
func (o *ListCatalogCategoriesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list catalog categories unauthorized response has a 3xx status code
func (o *ListCatalogCategoriesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list catalog categories unauthorized response has a 4xx status code
func (o *ListCatalogCategoriesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list catalog categories unauthorized response has a 5xx status code
func (o *ListCatalogCategoriesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list catalog categories unauthorized response a status code equal to that given
func (o *ListCatalogCategoriesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list catalog categories unauthorized response
func (o *ListCatalogCategoriesUnauthorized) Code() int {
	return 401
}

func (o *ListCatalogCategoriesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesUnauthorized %s", 401, payload)
}

func (o *ListCatalogCategoriesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesUnauthorized %s", 401, payload)
}

func (o *ListCatalogCategoriesUnauthorized) GetPayload() *models.ListCatalogCategoriesResponse {
	return o.Payload
}

func (o *ListCatalogCategoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListCatalogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCatalogCategoriesForbidden creates a ListCatalogCategoriesForbidden with default headers values
func NewListCatalogCategoriesForbidden() *ListCatalogCategoriesForbidden {
	return &ListCatalogCategoriesForbidden{}
}

/*
ListCatalogCategoriesForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListCatalogCategoriesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListCatalogCategoriesResponse
}

// IsSuccess returns true when this list catalog categories forbidden response has a 2xx status code
func (o *ListCatalogCategoriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list catalog categories forbidden response has a 3xx status code
func (o *ListCatalogCategoriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list catalog categories forbidden response has a 4xx status code
func (o *ListCatalogCategoriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list catalog categories forbidden response has a 5xx status code
func (o *ListCatalogCategoriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list catalog categories forbidden response a status code equal to that given
func (o *ListCatalogCategoriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list catalog categories forbidden response
func (o *ListCatalogCategoriesForbidden) Code() int {
	return 403
}

func (o *ListCatalogCategoriesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesForbidden %s", 403, payload)
}

func (o *ListCatalogCategoriesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesForbidden %s", 403, payload)
}

func (o *ListCatalogCategoriesForbidden) GetPayload() *models.ListCatalogCategoriesResponse {
	return o.Payload
}

func (o *ListCatalogCategoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListCatalogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCatalogCategoriesNotFound creates a ListCatalogCategoriesNotFound with default headers values
func NewListCatalogCategoriesNotFound() *ListCatalogCategoriesNotFound {
	return &ListCatalogCategoriesNotFound{}
}

/*
ListCatalogCategoriesNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type ListCatalogCategoriesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListCatalogCategoriesResponse
}

// IsSuccess returns true when this list catalog categories not found response has a 2xx status code
func (o *ListCatalogCategoriesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list catalog categories not found response has a 3xx status code
func (o *ListCatalogCategoriesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list catalog categories not found response has a 4xx status code
func (o *ListCatalogCategoriesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list catalog categories not found response has a 5xx status code
func (o *ListCatalogCategoriesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list catalog categories not found response a status code equal to that given
func (o *ListCatalogCategoriesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list catalog categories not found response
func (o *ListCatalogCategoriesNotFound) Code() int {
	return 404
}

func (o *ListCatalogCategoriesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesNotFound %s", 404, payload)
}

func (o *ListCatalogCategoriesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesNotFound %s", 404, payload)
}

func (o *ListCatalogCategoriesNotFound) GetPayload() *models.ListCatalogCategoriesResponse {
	return o.Payload
}

func (o *ListCatalogCategoriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListCatalogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCatalogCategoriesTooManyRequests creates a ListCatalogCategoriesTooManyRequests with default headers values
func NewListCatalogCategoriesTooManyRequests() *ListCatalogCategoriesTooManyRequests {
	return &ListCatalogCategoriesTooManyRequests{}
}

/*
ListCatalogCategoriesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListCatalogCategoriesTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListCatalogCategoriesResponse
}

// IsSuccess returns true when this list catalog categories too many requests response has a 2xx status code
func (o *ListCatalogCategoriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list catalog categories too many requests response has a 3xx status code
func (o *ListCatalogCategoriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list catalog categories too many requests response has a 4xx status code
func (o *ListCatalogCategoriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list catalog categories too many requests response has a 5xx status code
func (o *ListCatalogCategoriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list catalog categories too many requests response a status code equal to that given
func (o *ListCatalogCategoriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list catalog categories too many requests response
func (o *ListCatalogCategoriesTooManyRequests) Code() int {
	return 429
}

func (o *ListCatalogCategoriesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesTooManyRequests %s", 429, payload)
}

func (o *ListCatalogCategoriesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesTooManyRequests %s", 429, payload)
}

func (o *ListCatalogCategoriesTooManyRequests) GetPayload() *models.ListCatalogCategoriesResponse {
	return o.Payload
}

func (o *ListCatalogCategoriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListCatalogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCatalogCategoriesInternalServerError creates a ListCatalogCategoriesInternalServerError with default headers values
func NewListCatalogCategoriesInternalServerError() *ListCatalogCategoriesInternalServerError {
	return &ListCatalogCategoriesInternalServerError{}
}

/*
ListCatalogCategoriesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListCatalogCategoriesInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListCatalogCategoriesResponse
}

// IsSuccess returns true when this list catalog categories internal server error response has a 2xx status code
func (o *ListCatalogCategoriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list catalog categories internal server error response has a 3xx status code
func (o *ListCatalogCategoriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list catalog categories internal server error response has a 4xx status code
func (o *ListCatalogCategoriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list catalog categories internal server error response has a 5xx status code
func (o *ListCatalogCategoriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list catalog categories internal server error response a status code equal to that given
func (o *ListCatalogCategoriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list catalog categories internal server error response
func (o *ListCatalogCategoriesInternalServerError) Code() int {
	return 500
}

func (o *ListCatalogCategoriesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesInternalServerError %s", 500, payload)
}

func (o *ListCatalogCategoriesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesInternalServerError %s", 500, payload)
}

func (o *ListCatalogCategoriesInternalServerError) GetPayload() *models.ListCatalogCategoriesResponse {
	return o.Payload
}

func (o *ListCatalogCategoriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListCatalogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCatalogCategoriesServiceUnavailable creates a ListCatalogCategoriesServiceUnavailable with default headers values
func NewListCatalogCategoriesServiceUnavailable() *ListCatalogCategoriesServiceUnavailable {
	return &ListCatalogCategoriesServiceUnavailable{}
}

/*
ListCatalogCategoriesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListCatalogCategoriesServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ListCatalogCategoriesResponse
}

// IsSuccess returns true when this list catalog categories service unavailable response has a 2xx status code
func (o *ListCatalogCategoriesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list catalog categories service unavailable response has a 3xx status code
func (o *ListCatalogCategoriesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list catalog categories service unavailable response has a 4xx status code
func (o *ListCatalogCategoriesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list catalog categories service unavailable response has a 5xx status code
func (o *ListCatalogCategoriesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list catalog categories service unavailable response a status code equal to that given
func (o *ListCatalogCategoriesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the list catalog categories service unavailable response
func (o *ListCatalogCategoriesServiceUnavailable) Code() int {
	return 503
}

func (o *ListCatalogCategoriesServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesServiceUnavailable %s", 503, payload)
}

func (o *ListCatalogCategoriesServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /catalog/v0/categories][%d] listCatalogCategoriesServiceUnavailable %s", 503, payload)
}

func (o *ListCatalogCategoriesServiceUnavailable) GetPayload() *models.ListCatalogCategoriesResponse {
	return o.Payload
}

func (o *ListCatalogCategoriesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ListCatalogCategoriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
