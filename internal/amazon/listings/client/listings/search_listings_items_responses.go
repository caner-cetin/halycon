// Code generated by go-swagger; DO NOT EDIT.

package listings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/caner-cetin/halycon/internal/amazon/listings/models"
)

// SearchListingsItemsReader is a Reader for the SearchListingsItems structure.
type SearchListingsItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchListingsItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchListingsItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchListingsItemsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchListingsItemsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchListingsItemsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewSearchListingsItemsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSearchListingsItemsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSearchListingsItemsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchListingsItemsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSearchListingsItemsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /listings/2021-08-01/items/{sellerId}] searchListingsItems", response, response.Code())
	}
}

// NewSearchListingsItemsOK creates a SearchListingsItemsOK with default headers values
func NewSearchListingsItemsOK() *SearchListingsItemsOK {
	return &SearchListingsItemsOK{}
}

/*
SearchListingsItemsOK describes a response with status code 200, with default header values.

Success.
*/
type SearchListingsItemsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ItemSearchResults
}

// IsSuccess returns true when this search listings items o k response has a 2xx status code
func (o *SearchListingsItemsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search listings items o k response has a 3xx status code
func (o *SearchListingsItemsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search listings items o k response has a 4xx status code
func (o *SearchListingsItemsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search listings items o k response has a 5xx status code
func (o *SearchListingsItemsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search listings items o k response a status code equal to that given
func (o *SearchListingsItemsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search listings items o k response
func (o *SearchListingsItemsOK) Code() int {
	return 200
}

func (o *SearchListingsItemsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsOK %s", 200, payload)
}

func (o *SearchListingsItemsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsOK %s", 200, payload)
}

func (o *SearchListingsItemsOK) GetPayload() *models.ItemSearchResults {
	return o.Payload
}

func (o *SearchListingsItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ItemSearchResults)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchListingsItemsBadRequest creates a SearchListingsItemsBadRequest with default headers values
func NewSearchListingsItemsBadRequest() *SearchListingsItemsBadRequest {
	return &SearchListingsItemsBadRequest{}
}

/*
SearchListingsItemsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SearchListingsItemsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this search listings items bad request response has a 2xx status code
func (o *SearchListingsItemsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search listings items bad request response has a 3xx status code
func (o *SearchListingsItemsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search listings items bad request response has a 4xx status code
func (o *SearchListingsItemsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search listings items bad request response has a 5xx status code
func (o *SearchListingsItemsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search listings items bad request response a status code equal to that given
func (o *SearchListingsItemsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search listings items bad request response
func (o *SearchListingsItemsBadRequest) Code() int {
	return 400
}

func (o *SearchListingsItemsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsBadRequest %s", 400, payload)
}

func (o *SearchListingsItemsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsBadRequest %s", 400, payload)
}

func (o *SearchListingsItemsBadRequest) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *SearchListingsItemsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchListingsItemsForbidden creates a SearchListingsItemsForbidden with default headers values
func NewSearchListingsItemsForbidden() *SearchListingsItemsForbidden {
	return &SearchListingsItemsForbidden{}
}

/*
SearchListingsItemsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SearchListingsItemsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this search listings items forbidden response has a 2xx status code
func (o *SearchListingsItemsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search listings items forbidden response has a 3xx status code
func (o *SearchListingsItemsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search listings items forbidden response has a 4xx status code
func (o *SearchListingsItemsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search listings items forbidden response has a 5xx status code
func (o *SearchListingsItemsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search listings items forbidden response a status code equal to that given
func (o *SearchListingsItemsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the search listings items forbidden response
func (o *SearchListingsItemsForbidden) Code() int {
	return 403
}

func (o *SearchListingsItemsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsForbidden %s", 403, payload)
}

func (o *SearchListingsItemsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsForbidden %s", 403, payload)
}

func (o *SearchListingsItemsForbidden) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *SearchListingsItemsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchListingsItemsNotFound creates a SearchListingsItemsNotFound with default headers values
func NewSearchListingsItemsNotFound() *SearchListingsItemsNotFound {
	return &SearchListingsItemsNotFound{}
}

/*
SearchListingsItemsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type SearchListingsItemsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this search listings items not found response has a 2xx status code
func (o *SearchListingsItemsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search listings items not found response has a 3xx status code
func (o *SearchListingsItemsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search listings items not found response has a 4xx status code
func (o *SearchListingsItemsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search listings items not found response has a 5xx status code
func (o *SearchListingsItemsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search listings items not found response a status code equal to that given
func (o *SearchListingsItemsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search listings items not found response
func (o *SearchListingsItemsNotFound) Code() int {
	return 404
}

func (o *SearchListingsItemsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsNotFound %s", 404, payload)
}

func (o *SearchListingsItemsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsNotFound %s", 404, payload)
}

func (o *SearchListingsItemsNotFound) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *SearchListingsItemsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchListingsItemsRequestEntityTooLarge creates a SearchListingsItemsRequestEntityTooLarge with default headers values
func NewSearchListingsItemsRequestEntityTooLarge() *SearchListingsItemsRequestEntityTooLarge {
	return &SearchListingsItemsRequestEntityTooLarge{}
}

/*
SearchListingsItemsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type SearchListingsItemsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this search listings items request entity too large response has a 2xx status code
func (o *SearchListingsItemsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search listings items request entity too large response has a 3xx status code
func (o *SearchListingsItemsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search listings items request entity too large response has a 4xx status code
func (o *SearchListingsItemsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this search listings items request entity too large response has a 5xx status code
func (o *SearchListingsItemsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this search listings items request entity too large response a status code equal to that given
func (o *SearchListingsItemsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the search listings items request entity too large response
func (o *SearchListingsItemsRequestEntityTooLarge) Code() int {
	return 413
}

func (o *SearchListingsItemsRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsRequestEntityTooLarge %s", 413, payload)
}

func (o *SearchListingsItemsRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsRequestEntityTooLarge %s", 413, payload)
}

func (o *SearchListingsItemsRequestEntityTooLarge) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *SearchListingsItemsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchListingsItemsUnsupportedMediaType creates a SearchListingsItemsUnsupportedMediaType with default headers values
func NewSearchListingsItemsUnsupportedMediaType() *SearchListingsItemsUnsupportedMediaType {
	return &SearchListingsItemsUnsupportedMediaType{}
}

/*
SearchListingsItemsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type SearchListingsItemsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this search listings items unsupported media type response has a 2xx status code
func (o *SearchListingsItemsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search listings items unsupported media type response has a 3xx status code
func (o *SearchListingsItemsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search listings items unsupported media type response has a 4xx status code
func (o *SearchListingsItemsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this search listings items unsupported media type response has a 5xx status code
func (o *SearchListingsItemsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this search listings items unsupported media type response a status code equal to that given
func (o *SearchListingsItemsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the search listings items unsupported media type response
func (o *SearchListingsItemsUnsupportedMediaType) Code() int {
	return 415
}

func (o *SearchListingsItemsUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsUnsupportedMediaType %s", 415, payload)
}

func (o *SearchListingsItemsUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsUnsupportedMediaType %s", 415, payload)
}

func (o *SearchListingsItemsUnsupportedMediaType) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *SearchListingsItemsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchListingsItemsTooManyRequests creates a SearchListingsItemsTooManyRequests with default headers values
func NewSearchListingsItemsTooManyRequests() *SearchListingsItemsTooManyRequests {
	return &SearchListingsItemsTooManyRequests{}
}

/*
SearchListingsItemsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SearchListingsItemsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this search listings items too many requests response has a 2xx status code
func (o *SearchListingsItemsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search listings items too many requests response has a 3xx status code
func (o *SearchListingsItemsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search listings items too many requests response has a 4xx status code
func (o *SearchListingsItemsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this search listings items too many requests response has a 5xx status code
func (o *SearchListingsItemsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this search listings items too many requests response a status code equal to that given
func (o *SearchListingsItemsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the search listings items too many requests response
func (o *SearchListingsItemsTooManyRequests) Code() int {
	return 429
}

func (o *SearchListingsItemsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsTooManyRequests %s", 429, payload)
}

func (o *SearchListingsItemsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsTooManyRequests %s", 429, payload)
}

func (o *SearchListingsItemsTooManyRequests) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *SearchListingsItemsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchListingsItemsInternalServerError creates a SearchListingsItemsInternalServerError with default headers values
func NewSearchListingsItemsInternalServerError() *SearchListingsItemsInternalServerError {
	return &SearchListingsItemsInternalServerError{}
}

/*
SearchListingsItemsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SearchListingsItemsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this search listings items internal server error response has a 2xx status code
func (o *SearchListingsItemsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search listings items internal server error response has a 3xx status code
func (o *SearchListingsItemsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search listings items internal server error response has a 4xx status code
func (o *SearchListingsItemsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search listings items internal server error response has a 5xx status code
func (o *SearchListingsItemsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search listings items internal server error response a status code equal to that given
func (o *SearchListingsItemsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search listings items internal server error response
func (o *SearchListingsItemsInternalServerError) Code() int {
	return 500
}

func (o *SearchListingsItemsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsInternalServerError %s", 500, payload)
}

func (o *SearchListingsItemsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsInternalServerError %s", 500, payload)
}

func (o *SearchListingsItemsInternalServerError) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *SearchListingsItemsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchListingsItemsServiceUnavailable creates a SearchListingsItemsServiceUnavailable with default headers values
func NewSearchListingsItemsServiceUnavailable() *SearchListingsItemsServiceUnavailable {
	return &SearchListingsItemsServiceUnavailable{}
}

/*
SearchListingsItemsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SearchListingsItemsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *models.ErrorList
}

// IsSuccess returns true when this search listings items service unavailable response has a 2xx status code
func (o *SearchListingsItemsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search listings items service unavailable response has a 3xx status code
func (o *SearchListingsItemsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search listings items service unavailable response has a 4xx status code
func (o *SearchListingsItemsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this search listings items service unavailable response has a 5xx status code
func (o *SearchListingsItemsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this search listings items service unavailable response a status code equal to that given
func (o *SearchListingsItemsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the search listings items service unavailable response
func (o *SearchListingsItemsServiceUnavailable) Code() int {
	return 503
}

func (o *SearchListingsItemsServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsServiceUnavailable %s", 503, payload)
}

func (o *SearchListingsItemsServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /listings/2021-08-01/items/{sellerId}][%d] searchListingsItemsServiceUnavailable %s", 503, payload)
}

func (o *SearchListingsItemsServiceUnavailable) GetPayload() *models.ErrorList {
	return o.Payload
}

func (o *SearchListingsItemsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
