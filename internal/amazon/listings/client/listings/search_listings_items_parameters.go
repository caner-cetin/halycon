// Code generated by go-swagger; DO NOT EDIT.

package listings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchListingsItemsParams creates a new SearchListingsItemsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchListingsItemsParams() *SearchListingsItemsParams {
	return &SearchListingsItemsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchListingsItemsParamsWithTimeout creates a new SearchListingsItemsParams object
// with the ability to set a timeout on a request.
func NewSearchListingsItemsParamsWithTimeout(timeout time.Duration) *SearchListingsItemsParams {
	return &SearchListingsItemsParams{
		timeout: timeout,
	}
}

// NewSearchListingsItemsParamsWithContext creates a new SearchListingsItemsParams object
// with the ability to set a context for a request.
func NewSearchListingsItemsParamsWithContext(ctx context.Context) *SearchListingsItemsParams {
	return &SearchListingsItemsParams{
		Context: ctx,
	}
}

// NewSearchListingsItemsParamsWithHTTPClient creates a new SearchListingsItemsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchListingsItemsParamsWithHTTPClient(client *http.Client) *SearchListingsItemsParams {
	return &SearchListingsItemsParams{
		HTTPClient: client,
	}
}

/*
SearchListingsItemsParams contains all the parameters to send to the API endpoint

	for the search listings items operation.

	Typically these are written to a http.Request.
*/
type SearchListingsItemsParams struct {

	/* CreatedAfter.

	   A date-time that is used to filter listing items. The response includes listings items that were created at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.

	   Format: date-time
	*/
	CreatedAfter *strfmt.DateTime

	/* CreatedBefore.

	   A date-time that is used to filter listing items. The response includes listings items that were created at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.

	   Format: date-time
	*/
	CreatedBefore *strfmt.DateTime

	/* Identifiers.

	     A comma-delimited list of product identifiers that you can use to search for listings items.

	**Note**:
	1. This is required when you specify `identifiersType`.
	2. You cannot use 'identifiers' if you specify `variationParentSku` or `packageHierarchySku`.
	*/
	Identifiers []string

	/* IdentifiersType.

	     A type of product identifiers that you can use to search for listings items.

	**Note**:
	This is required when `identifiers` is provided.
	*/
	IdentifiersType *string

	/* IncludedData.

	   A comma-delimited list of datasets that you want to include in the response. Default: `summaries`.

	   Default: ["summaries"]
	*/
	IncludedData []string

	/* IssueLocale.

	   A locale that is used to localize issues. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". When a localization is not available in the specified locale, localized messages default to "en_US".
	*/
	IssueLocale *string

	/* LastUpdatedAfter.

	   A date-time that is used to filter listing items. The response includes listings items that were last updated at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.

	   Format: date-time
	*/
	LastUpdatedAfter *strfmt.DateTime

	/* LastUpdatedBefore.

	   A date-time that is used to filter listing items. The response includes listings items that were last updated at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.

	   Format: date-time
	*/
	LastUpdatedBefore *strfmt.DateTime

	/* MarketplaceIds.

	   A comma-delimited list of Amazon marketplace identifiers for the request.
	*/
	MarketplaceIds []string

	/* PackageHierarchySku.

	     Filter results to include listing items that contain or are contained by the specified SKU.

	**Note**: You cannot use `packageHierarchySku` if you include `identifiers` or `variationParentSku` in your request.
	*/
	PackageHierarchySku *string

	/* PageSize.

	   The number of results that you want to include on each page.

	   Default: 10
	*/
	PageSize *int64

	/* PageToken.

	   A token that you can use to fetch a specific page when there are multiple pages of results.
	*/
	PageToken *string

	/* SellerID.

	   A selling partner identifier, such as a merchant account or vendor code.
	*/
	SellerID string

	/* SortBy.

	   An attribute by which to sort the returned listing items.

	   Default: "lastUpdatedDate"
	*/
	SortBy *string

	/* SortOrder.

	   The order in which to sort the result items.

	   Default: "DESC"
	*/
	SortOrder *string

	/* VariationParentSku.

	     Filters results to include listing items that are variation children of the specified SKU.

	**Note**: You cannot use `variationParentSku` if you include `identifiers` or `packageHierarchySku` in your request.
	*/
	VariationParentSku *string

	/* WithIssueSeverity.

	   Filter results to include only listing items that have issues that match one or more of the specified severity levels.
	*/
	WithIssueSeverity []string

	/* WithStatus.

	   Filter results to include only listing items that have the specified status.
	*/
	WithStatus []string

	/* WithoutStatus.

	   Filter results to include only listing items that don't contain the specified statuses.
	*/
	WithoutStatus []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search listings items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchListingsItemsParams) WithDefaults() *SearchListingsItemsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search listings items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchListingsItemsParams) SetDefaults() {
	var (
		includedDataDefault = []string{"summaries"}

		pageSizeDefault = int64(10)

		sortByDefault = string("lastUpdatedDate")

		sortOrderDefault = string("DESC")
	)

	val := SearchListingsItemsParams{
		IncludedData: includedDataDefault,
		PageSize:     &pageSizeDefault,
		SortBy:       &sortByDefault,
		SortOrder:    &sortOrderDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search listings items params
func (o *SearchListingsItemsParams) WithTimeout(timeout time.Duration) *SearchListingsItemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search listings items params
func (o *SearchListingsItemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search listings items params
func (o *SearchListingsItemsParams) WithContext(ctx context.Context) *SearchListingsItemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search listings items params
func (o *SearchListingsItemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search listings items params
func (o *SearchListingsItemsParams) WithHTTPClient(client *http.Client) *SearchListingsItemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search listings items params
func (o *SearchListingsItemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedAfter adds the createdAfter to the search listings items params
func (o *SearchListingsItemsParams) WithCreatedAfter(createdAfter *strfmt.DateTime) *SearchListingsItemsParams {
	o.SetCreatedAfter(createdAfter)
	return o
}

// SetCreatedAfter adds the createdAfter to the search listings items params
func (o *SearchListingsItemsParams) SetCreatedAfter(createdAfter *strfmt.DateTime) {
	o.CreatedAfter = createdAfter
}

// WithCreatedBefore adds the createdBefore to the search listings items params
func (o *SearchListingsItemsParams) WithCreatedBefore(createdBefore *strfmt.DateTime) *SearchListingsItemsParams {
	o.SetCreatedBefore(createdBefore)
	return o
}

// SetCreatedBefore adds the createdBefore to the search listings items params
func (o *SearchListingsItemsParams) SetCreatedBefore(createdBefore *strfmt.DateTime) {
	o.CreatedBefore = createdBefore
}

// WithIdentifiers adds the identifiers to the search listings items params
func (o *SearchListingsItemsParams) WithIdentifiers(identifiers []string) *SearchListingsItemsParams {
	o.SetIdentifiers(identifiers)
	return o
}

// SetIdentifiers adds the identifiers to the search listings items params
func (o *SearchListingsItemsParams) SetIdentifiers(identifiers []string) {
	o.Identifiers = identifiers
}

// WithIdentifiersType adds the identifiersType to the search listings items params
func (o *SearchListingsItemsParams) WithIdentifiersType(identifiersType *string) *SearchListingsItemsParams {
	o.SetIdentifiersType(identifiersType)
	return o
}

// SetIdentifiersType adds the identifiersType to the search listings items params
func (o *SearchListingsItemsParams) SetIdentifiersType(identifiersType *string) {
	o.IdentifiersType = identifiersType
}

// WithIncludedData adds the includedData to the search listings items params
func (o *SearchListingsItemsParams) WithIncludedData(includedData []string) *SearchListingsItemsParams {
	o.SetIncludedData(includedData)
	return o
}

// SetIncludedData adds the includedData to the search listings items params
func (o *SearchListingsItemsParams) SetIncludedData(includedData []string) {
	o.IncludedData = includedData
}

// WithIssueLocale adds the issueLocale to the search listings items params
func (o *SearchListingsItemsParams) WithIssueLocale(issueLocale *string) *SearchListingsItemsParams {
	o.SetIssueLocale(issueLocale)
	return o
}

// SetIssueLocale adds the issueLocale to the search listings items params
func (o *SearchListingsItemsParams) SetIssueLocale(issueLocale *string) {
	o.IssueLocale = issueLocale
}

// WithLastUpdatedAfter adds the lastUpdatedAfter to the search listings items params
func (o *SearchListingsItemsParams) WithLastUpdatedAfter(lastUpdatedAfter *strfmt.DateTime) *SearchListingsItemsParams {
	o.SetLastUpdatedAfter(lastUpdatedAfter)
	return o
}

// SetLastUpdatedAfter adds the lastUpdatedAfter to the search listings items params
func (o *SearchListingsItemsParams) SetLastUpdatedAfter(lastUpdatedAfter *strfmt.DateTime) {
	o.LastUpdatedAfter = lastUpdatedAfter
}

// WithLastUpdatedBefore adds the lastUpdatedBefore to the search listings items params
func (o *SearchListingsItemsParams) WithLastUpdatedBefore(lastUpdatedBefore *strfmt.DateTime) *SearchListingsItemsParams {
	o.SetLastUpdatedBefore(lastUpdatedBefore)
	return o
}

// SetLastUpdatedBefore adds the lastUpdatedBefore to the search listings items params
func (o *SearchListingsItemsParams) SetLastUpdatedBefore(lastUpdatedBefore *strfmt.DateTime) {
	o.LastUpdatedBefore = lastUpdatedBefore
}

// WithMarketplaceIds adds the marketplaceIds to the search listings items params
func (o *SearchListingsItemsParams) WithMarketplaceIds(marketplaceIds []string) *SearchListingsItemsParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the search listings items params
func (o *SearchListingsItemsParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithPackageHierarchySku adds the packageHierarchySku to the search listings items params
func (o *SearchListingsItemsParams) WithPackageHierarchySku(packageHierarchySku *string) *SearchListingsItemsParams {
	o.SetPackageHierarchySku(packageHierarchySku)
	return o
}

// SetPackageHierarchySku adds the packageHierarchySku to the search listings items params
func (o *SearchListingsItemsParams) SetPackageHierarchySku(packageHierarchySku *string) {
	o.PackageHierarchySku = packageHierarchySku
}

// WithPageSize adds the pageSize to the search listings items params
func (o *SearchListingsItemsParams) WithPageSize(pageSize *int64) *SearchListingsItemsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search listings items params
func (o *SearchListingsItemsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the search listings items params
func (o *SearchListingsItemsParams) WithPageToken(pageToken *string) *SearchListingsItemsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the search listings items params
func (o *SearchListingsItemsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithSellerID adds the sellerID to the search listings items params
func (o *SearchListingsItemsParams) WithSellerID(sellerID string) *SearchListingsItemsParams {
	o.SetSellerID(sellerID)
	return o
}

// SetSellerID adds the sellerId to the search listings items params
func (o *SearchListingsItemsParams) SetSellerID(sellerID string) {
	o.SellerID = sellerID
}

// WithSortBy adds the sortBy to the search listings items params
func (o *SearchListingsItemsParams) WithSortBy(sortBy *string) *SearchListingsItemsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the search listings items params
func (o *SearchListingsItemsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the search listings items params
func (o *SearchListingsItemsParams) WithSortOrder(sortOrder *string) *SearchListingsItemsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the search listings items params
func (o *SearchListingsItemsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithVariationParentSku adds the variationParentSku to the search listings items params
func (o *SearchListingsItemsParams) WithVariationParentSku(variationParentSku *string) *SearchListingsItemsParams {
	o.SetVariationParentSku(variationParentSku)
	return o
}

// SetVariationParentSku adds the variationParentSku to the search listings items params
func (o *SearchListingsItemsParams) SetVariationParentSku(variationParentSku *string) {
	o.VariationParentSku = variationParentSku
}

// WithWithIssueSeverity adds the withIssueSeverity to the search listings items params
func (o *SearchListingsItemsParams) WithWithIssueSeverity(withIssueSeverity []string) *SearchListingsItemsParams {
	o.SetWithIssueSeverity(withIssueSeverity)
	return o
}

// SetWithIssueSeverity adds the withIssueSeverity to the search listings items params
func (o *SearchListingsItemsParams) SetWithIssueSeverity(withIssueSeverity []string) {
	o.WithIssueSeverity = withIssueSeverity
}

// WithWithStatus adds the withStatus to the search listings items params
func (o *SearchListingsItemsParams) WithWithStatus(withStatus []string) *SearchListingsItemsParams {
	o.SetWithStatus(withStatus)
	return o
}

// SetWithStatus adds the withStatus to the search listings items params
func (o *SearchListingsItemsParams) SetWithStatus(withStatus []string) {
	o.WithStatus = withStatus
}

// WithWithoutStatus adds the withoutStatus to the search listings items params
func (o *SearchListingsItemsParams) WithWithoutStatus(withoutStatus []string) *SearchListingsItemsParams {
	o.SetWithoutStatus(withoutStatus)
	return o
}

// SetWithoutStatus adds the withoutStatus to the search listings items params
func (o *SearchListingsItemsParams) SetWithoutStatus(withoutStatus []string) {
	o.WithoutStatus = withoutStatus
}

// WriteToRequest writes these params to a swagger request
func (o *SearchListingsItemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedAfter != nil {

		// query param createdAfter
		var qrCreatedAfter strfmt.DateTime

		if o.CreatedAfter != nil {
			qrCreatedAfter = *o.CreatedAfter
		}
		qCreatedAfter := qrCreatedAfter.String()
		if qCreatedAfter != "" {

			if err := r.SetQueryParam("createdAfter", qCreatedAfter); err != nil {
				return err
			}
		}
	}

	if o.CreatedBefore != nil {

		// query param createdBefore
		var qrCreatedBefore strfmt.DateTime

		if o.CreatedBefore != nil {
			qrCreatedBefore = *o.CreatedBefore
		}
		qCreatedBefore := qrCreatedBefore.String()
		if qCreatedBefore != "" {

			if err := r.SetQueryParam("createdBefore", qCreatedBefore); err != nil {
				return err
			}
		}
	}

	if o.Identifiers != nil {

		// binding items for identifiers
		joinedIdentifiers := o.bindParamIdentifiers(reg)

		// query array param identifiers
		if err := r.SetQueryParam("identifiers", joinedIdentifiers...); err != nil {
			return err
		}
	}

	if o.IdentifiersType != nil {

		// query param identifiersType
		var qrIdentifiersType string

		if o.IdentifiersType != nil {
			qrIdentifiersType = *o.IdentifiersType
		}
		qIdentifiersType := qrIdentifiersType
		if qIdentifiersType != "" {

			if err := r.SetQueryParam("identifiersType", qIdentifiersType); err != nil {
				return err
			}
		}
	}

	if o.IncludedData != nil {

		// binding items for includedData
		joinedIncludedData := o.bindParamIncludedData(reg)

		// query array param includedData
		if err := r.SetQueryParam("includedData", joinedIncludedData...); err != nil {
			return err
		}
	}

	if o.IssueLocale != nil {

		// query param issueLocale
		var qrIssueLocale string

		if o.IssueLocale != nil {
			qrIssueLocale = *o.IssueLocale
		}
		qIssueLocale := qrIssueLocale
		if qIssueLocale != "" {

			if err := r.SetQueryParam("issueLocale", qIssueLocale); err != nil {
				return err
			}
		}
	}

	if o.LastUpdatedAfter != nil {

		// query param lastUpdatedAfter
		var qrLastUpdatedAfter strfmt.DateTime

		if o.LastUpdatedAfter != nil {
			qrLastUpdatedAfter = *o.LastUpdatedAfter
		}
		qLastUpdatedAfter := qrLastUpdatedAfter.String()
		if qLastUpdatedAfter != "" {

			if err := r.SetQueryParam("lastUpdatedAfter", qLastUpdatedAfter); err != nil {
				return err
			}
		}
	}

	if o.LastUpdatedBefore != nil {

		// query param lastUpdatedBefore
		var qrLastUpdatedBefore strfmt.DateTime

		if o.LastUpdatedBefore != nil {
			qrLastUpdatedBefore = *o.LastUpdatedBefore
		}
		qLastUpdatedBefore := qrLastUpdatedBefore.String()
		if qLastUpdatedBefore != "" {

			if err := r.SetQueryParam("lastUpdatedBefore", qLastUpdatedBefore); err != nil {
				return err
			}
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	if o.PackageHierarchySku != nil {

		// query param packageHierarchySku
		var qrPackageHierarchySku string

		if o.PackageHierarchySku != nil {
			qrPackageHierarchySku = *o.PackageHierarchySku
		}
		qPackageHierarchySku := qrPackageHierarchySku
		if qPackageHierarchySku != "" {

			if err := r.SetQueryParam("packageHierarchySku", qPackageHierarchySku); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param pageToken
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("pageToken", qPageToken); err != nil {
				return err
			}
		}
	}

	// path param sellerId
	if err := r.SetPathParam("sellerId", o.SellerID); err != nil {
		return err
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}
	}

	if o.VariationParentSku != nil {

		// query param variationParentSku
		var qrVariationParentSku string

		if o.VariationParentSku != nil {
			qrVariationParentSku = *o.VariationParentSku
		}
		qVariationParentSku := qrVariationParentSku
		if qVariationParentSku != "" {

			if err := r.SetQueryParam("variationParentSku", qVariationParentSku); err != nil {
				return err
			}
		}
	}

	if o.WithIssueSeverity != nil {

		// binding items for withIssueSeverity
		joinedWithIssueSeverity := o.bindParamWithIssueSeverity(reg)

		// query array param withIssueSeverity
		if err := r.SetQueryParam("withIssueSeverity", joinedWithIssueSeverity...); err != nil {
			return err
		}
	}

	if o.WithStatus != nil {

		// binding items for withStatus
		joinedWithStatus := o.bindParamWithStatus(reg)

		// query array param withStatus
		if err := r.SetQueryParam("withStatus", joinedWithStatus...); err != nil {
			return err
		}
	}

	if o.WithoutStatus != nil {

		// binding items for withoutStatus
		joinedWithoutStatus := o.bindParamWithoutStatus(reg)

		// query array param withoutStatus
		if err := r.SetQueryParam("withoutStatus", joinedWithoutStatus...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchListingsItems binds the parameter identifiers
func (o *SearchListingsItemsParams) bindParamIdentifiers(formats strfmt.Registry) []string {
	identifiersIR := o.Identifiers

	var identifiersIC []string
	for _, identifiersIIR := range identifiersIR { // explode []string

		identifiersIIV := identifiersIIR // string as string
		identifiersIC = append(identifiersIC, identifiersIIV)
	}

	// items.CollectionFormat: "csv"
	identifiersIS := swag.JoinByFormat(identifiersIC, "csv")

	return identifiersIS
}

// bindParamSearchListingsItems binds the parameter includedData
func (o *SearchListingsItemsParams) bindParamIncludedData(formats strfmt.Registry) []string {
	includedDataIR := o.IncludedData

	var includedDataIC []string
	for _, includedDataIIR := range includedDataIR { // explode []string

		includedDataIIV := includedDataIIR // string as string
		includedDataIC = append(includedDataIC, includedDataIIV)
	}

	// items.CollectionFormat: "csv"
	includedDataIS := swag.JoinByFormat(includedDataIC, "csv")

	return includedDataIS
}

// bindParamSearchListingsItems binds the parameter marketplaceIds
func (o *SearchListingsItemsParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: "csv"
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "csv")

	return marketplaceIdsIS
}

// bindParamSearchListingsItems binds the parameter withIssueSeverity
func (o *SearchListingsItemsParams) bindParamWithIssueSeverity(formats strfmt.Registry) []string {
	withIssueSeverityIR := o.WithIssueSeverity

	var withIssueSeverityIC []string
	for _, withIssueSeverityIIR := range withIssueSeverityIR { // explode []string

		withIssueSeverityIIV := withIssueSeverityIIR // string as string
		withIssueSeverityIC = append(withIssueSeverityIC, withIssueSeverityIIV)
	}

	// items.CollectionFormat: "csv"
	withIssueSeverityIS := swag.JoinByFormat(withIssueSeverityIC, "csv")

	return withIssueSeverityIS
}

// bindParamSearchListingsItems binds the parameter withStatus
func (o *SearchListingsItemsParams) bindParamWithStatus(formats strfmt.Registry) []string {
	withStatusIR := o.WithStatus

	var withStatusIC []string
	for _, withStatusIIR := range withStatusIR { // explode []string

		withStatusIIV := withStatusIIR // string as string
		withStatusIC = append(withStatusIC, withStatusIIV)
	}

	// items.CollectionFormat: "csv"
	withStatusIS := swag.JoinByFormat(withStatusIC, "csv")

	return withStatusIS
}

// bindParamSearchListingsItems binds the parameter withoutStatus
func (o *SearchListingsItemsParams) bindParamWithoutStatus(formats strfmt.Registry) []string {
	withoutStatusIR := o.WithoutStatus

	var withoutStatusIC []string
	for _, withoutStatusIIR := range withoutStatusIR { // explode []string

		withoutStatusIIV := withoutStatusIIR // string as string
		withoutStatusIC = append(withoutStatusIC, withoutStatusIIV)
	}

	// items.CollectionFormat: "csv"
	withoutStatusIS := swag.JoinByFormat(withoutStatusIC, "csv")

	return withoutStatusIS
}
